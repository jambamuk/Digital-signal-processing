/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2019 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <math.h>
#include <complex.h>

#include <arm_math.h>
#include <arm_const_structs.h>
#include <arm_common_tables.h>

#include "stm32f429i_discovery_lcd.h"
#include "stm32f429i_discovery_ts.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#ifndef TRUE
#define TRUE  (1==1)
#define FALSE (1==0)
#endif

#define FFT_SIZE            2048 // must be power of 2
#define LCD_PADDING         20
#define N_order 						6
#define Fs									4500000
#define MODULATED_SIZE		5995

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

DAC_HandleTypeDef hdac;

DMA2D_HandleTypeDef hdma2d;

I2C_HandleTypeDef hi2c3;

LTDC_HandleTypeDef hltdc;

SPI_HandleTypeDef hspi5;

UART_HandleTypeDef huart5;

SDRAM_HandleTypeDef hsdram1;

/* USER CODE BEGIN PV */

uint16_t Tcount, Test, IIRCounter, FFTCounter;
uint32_t i,p;
float32_t sum, mean;

uint32_t InputADC[(int) 10.5*FFT_SIZE];
uint32_t *INADC = InputADC;

float32_t Input[FFT_SIZE];
float32_t *IN = Input;
float32_t Output[2*FFT_SIZE];
float32_t *OUT = Output;
float32_t Magnitude[FFT_SIZE/2];
float32_t *MAG = Magnitude;
uint32_t Blocks = 256;
uint32_t BlockSize = 8;
uint32_t newArr[FFT_SIZE - 256];
uint8_t Stages = 3; // filter stages
float32_t StateVariable[6] = {0}; // for BPF
float32_t *StateV = StateVariable; // FOR BPF

/*********** BANDPASS FILTER COEFFICIENTS - 6th ORDER ******************/

float32_t Coefficients[120][15] = {
{
0.179023  , -0.257866 ,   0.179023  ,-1* -1.464557  ,-1*   0.996996 ,
0.179023  , -0.269943 ,   0.179023  ,-1* -1.481044  ,-1*   0.997036 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.470365  ,-1*   0.993640
}

,{
0.179023  , -0.254726 ,   0.179023  ,-1* -1.447382  ,-1*   0.996997 ,
0.179023  , -0.266968 ,   0.179023  ,-1* -1.464092  ,-1*   0.997036 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.453330  ,-1*   0.993640
}

,{
0.179023  , -0.251546 ,   0.179023  ,-1* -1.429978  ,-1*   0.996997 ,
0.179023  , -0.263951 ,   0.179023  ,-1* -1.446909  ,-1*   0.997035 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.436065  ,-1*   0.993640
}

,{
0.179023  , -0.248326 ,   0.179023  ,-1* -1.412349  ,-1*   0.996998 ,
0.179023  , -0.260892 ,   0.179023  ,-1* -1.429498  ,-1*   0.997035 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.418574  ,-1*   0.993640
}

,{
0.179023  , -0.245068 ,   0.179023  ,-1* -1.394496  ,-1*   0.996998 ,
0.179023  , -0.257792 ,   0.179023  ,-1* -1.411862  ,-1*   0.997034 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.400859  ,-1*   0.993640
}

,{
0.179023  , -0.241770 ,   0.179023  ,-1* -1.376424  ,-1*   0.996999 ,
0.179023  , -0.254651 ,   0.179023  ,-1* -1.394002  ,-1*   0.997034 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.382922  ,-1*   0.993640
}

,{
0.179023  , -0.238434 ,   0.179023  ,-1* -1.358134  ,-1*   0.996999 ,
0.179023  , -0.251470 ,   0.179023  ,-1* -1.375922  ,-1*   0.997033 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.364767  ,-1*   0.993640
}

,{
0.179023  , -0.235061 ,   0.179023  ,-1* -1.339629  ,-1*   0.997000 ,
0.179023  , -0.248249 ,   0.179023  ,-1* -1.357625  ,-1*   0.997033 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.346397  ,-1*   0.993640
}

,{
0.179023  , -0.231650 ,   0.179023  ,-1* -1.320913  ,-1*   0.997000 ,
0.179023  , -0.244989 ,   0.179023  ,-1* -1.339113  ,-1*   0.997033 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.327814  ,-1*   0.993640
}

,{
0.179023  , -0.228203 ,   0.179023  ,-1* -1.301989  ,-1*   0.997000 ,
0.179023  , -0.241690 ,   0.179023  ,-1* -1.320390  ,-1*   0.997032 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.309021  ,-1*   0.993640
}

,{
0.179023  , -0.224720 ,   0.179023  ,-1* -1.282859  ,-1*   0.997001 ,
0.179023  , -0.238353 ,   0.179023  ,-1* -1.301459  ,-1*   0.997032 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.290022  ,-1*   0.993640
}

,{
0.179023  , -0.221201 ,   0.179023  ,-1* -1.263526  ,-1*   0.997001 ,
0.179023  , -0.234979 ,   0.179023  ,-1* -1.282322  ,-1*   0.997031 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.270819  ,-1*   0.993640
}

,{
0.179023  , -0.217647 ,   0.179023  ,-1* -1.243993  ,-1*   0.997002 ,
0.179023  , -0.231567 ,   0.179023  ,-1* -1.262983  ,-1*   0.997031 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.251415  ,-1*   0.993640
}

,{
0.179023  , -0.214059 ,   0.179023  ,-1* -1.224265  ,-1*   0.997002 ,
0.179023  , -0.228119 ,   0.179023  ,-1* -1.243444  ,-1*   0.997031 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.231814  ,-1*   0.993640
}

,{
0.179023  , -0.210438 ,   0.179023  ,-1* -1.204342  ,-1*   0.997002 ,
0.179023  , -0.224635 ,   0.179023  ,-1* -1.223709  ,-1*   0.997030 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.212018  ,-1*   0.993640
}

,{
0.179023  , -0.206782 ,   0.179023  ,-1* -1.184230  ,-1*   0.997003 ,
0.179023  , -0.221115 ,   0.179023  ,-1* -1.203780  ,-1*   0.997030 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.192031  ,-1*   0.993640
}

,{
0.179023  , -0.203095 ,   0.179023  ,-1* -1.163931  ,-1*   0.997003 ,
0.179023  , -0.217560 ,   0.179023  ,-1* -1.183662  ,-1*   0.997030 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.171855  ,-1*   0.993640
}

,{
0.179023  , -0.199375 ,   0.179023  ,-1* -1.143448  ,-1*   0.997003 ,
0.179023  , -0.213971 ,   0.179023  ,-1* -1.163356  ,-1*   0.997029 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.151495  ,-1*   0.993640
}

,{
0.179023  , -0.195624 ,   0.179023  ,-1* -1.122784  ,-1*   0.997004 ,
0.179023  , -0.210349 ,   0.179023  ,-1* -1.142867  ,-1*   0.997029 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.130952  ,-1*   0.993640
}

,{
0.179023  , -0.191842 ,   0.179023  ,-1* -1.101943  ,-1*   0.997004 ,
0.179023  , -0.206693 ,   0.179023  ,-1* -1.122198  ,-1*   0.997028 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.110231  ,-1*   0.993640
}

,{
0.179023  , -0.188029 ,   0.179023  ,-1* -1.080928  ,-1*   0.997004 ,
0.179023  , -0.203004 ,   0.179023  ,-1* -1.101351  ,-1*   0.997028 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.089335  ,-1*   0.993640
}

,{
0.179023  , -0.184187 ,   0.179023  ,-1* -1.059742  ,-1*   0.997005 ,
0.179023  , -0.199283 ,   0.179023  ,-1* -1.080330  ,-1*   0.997028 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.068267  ,-1*   0.993640
}

,{
0.179023  , -0.180316 ,   0.179023  ,-1* -1.038389  ,-1*   0.997005 ,
0.179023  , -0.195531 ,   0.179023  ,-1* -1.059139  ,-1*   0.997028 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.047030  ,-1*   0.993640
}

,{
0.179023  , -0.176416 ,   0.179023  ,-1* -1.016872  ,-1*   0.997005 ,
0.179023  , -0.191748 ,   0.179023  ,-1* -1.037781  ,-1*   0.997027 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.025627  ,-1*   0.993640
}

,{
0.179023  , -0.172489 ,   0.179023  ,-1* -0.995194  ,-1*   0.997006 ,
0.179023  , -0.187935 ,   0.179023  ,-1* -1.016258  ,-1*   0.997027 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -1.004063  ,-1*   0.993640
}

,{
0.179023  , -0.168534 ,   0.179023  ,-1* -0.973359  ,-1*   0.997006 ,
0.179023  , -0.184092 ,   0.179023  ,-1* -0.994576  ,-1*   0.997027 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.982340  ,-1*   0.993640
}

,{
0.179023  , -0.164552 ,   0.179023  ,-1* -0.951371  ,-1*   0.997006 ,
0.179023  , -0.180220 ,   0.179023  ,-1* -0.972736  ,-1*   0.997026 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.960462  ,-1*   0.993640
}

,{
0.179023  , -0.160545 ,   0.179023  ,-1* -0.929232  ,-1*   0.997007 ,
0.179023  , -0.176319 ,   0.179023  ,-1* -0.950742  ,-1*   0.997026 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.938433  ,-1*   0.993640
}

,{
0.179023  , -0.156512 ,   0.179023  ,-1* -0.906946  ,-1*   0.997007 ,
0.179023  , -0.172391 ,   0.179023  ,-1* -0.928599  ,-1*   0.997026 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.916255  ,-1*   0.993640
}

,{
0.179023  , -0.152455 ,   0.179023  ,-1* -0.884518  ,-1*   0.997007 ,
0.179023  , -0.168436 ,   0.179023  ,-1* -0.906308  ,-1*   0.997025 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.893932  ,-1*   0.993640
}

,{
0.179023  , -0.148373 ,   0.179023  ,-1* -0.861949  ,-1*   0.997007 ,
0.179023  , -0.164453 ,   0.179023  ,-1* -0.883875  ,-1*   0.997025 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.871469  ,-1*   0.993640
}

,{
0.179023  , -0.144268 ,   0.179023  ,-1* -0.839245  ,-1*   0.997008 ,
0.179023  , -0.160445 ,   0.179023  ,-1* -0.861302  ,-1*   0.997025 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.848867  ,-1*   0.993640
}

,{
0.179023  , -0.140141 ,   0.179023  ,-1* -0.816407  ,-1*   0.997008 ,
0.179023  , -0.156412 ,   0.179023  ,-1* -0.838593  ,-1*   0.997025 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.826132  ,-1*   0.993640
}

,{
0.179023  , -0.135991 ,   0.179023  ,-1* -0.793441  ,-1*   0.997008 ,
0.179023  , -0.152354 ,   0.179023  ,-1* -0.815752  ,-1*   0.997024 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.803266  ,-1*   0.993640
}

,{
0.179023  , -0.131819 ,   0.179023  ,-1* -0.770350  ,-1*   0.997009 ,
0.179023  , -0.148272 ,   0.179023  ,-1* -0.792782  ,-1*   0.997024 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.780274  ,-1*   0.993640
}

,{
0.179023  , -0.127627 ,   0.179023  ,-1* -0.747137  ,-1*   0.997009 ,
0.179023  , -0.144166 ,   0.179023  ,-1* -0.769687  ,-1*   0.997024 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.757158  ,-1*   0.993640
}

,{
0.179023  , -0.123415 ,   0.179023  ,-1* -0.723806  ,-1*   0.997009 ,
0.179023  , -0.140038 ,   0.179023  ,-1* -0.746470  ,-1*   0.997023 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.733922  ,-1*   0.993640
}

,{
0.179023  , -0.119183 ,   0.179023  ,-1* -0.700361  ,-1*   0.997009 ,
0.179023  , -0.135887 ,   0.179023  ,-1* -0.723135  ,-1*   0.997023 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.710571  ,-1*   0.993640
}

,{
0.179023  , -0.114932 ,   0.179023  ,-1* -0.676805  ,-1*   0.997010 ,
0.179023  , -0.131715 ,   0.179023  ,-1* -0.699686  ,-1*   0.997023 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.687107  ,-1*   0.993640
}

,{
0.179023  , -0.110664 ,   0.179023  ,-1* -0.653142  ,-1*   0.997010 ,
0.179023  , -0.127522 ,   0.179023  ,-1* -0.676127  ,-1*   0.997023 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.663535  ,-1*   0.993640
}

,{
0.179023  , -0.106377 ,   0.179023  ,-1* -0.629376  ,-1*   0.997010 ,
0.179023  , -0.123310 ,   0.179023  ,-1* -0.652461  ,-1*   0.997022 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.639859  ,-1*   0.993640
}

,{
0.179023  , -0.102074 ,   0.179023  ,-1* -0.605511  ,-1*   0.997010 ,
0.179023  , -0.119077 ,   0.179023  ,-1* -0.628692  ,-1*   0.997022 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.616081  ,-1*   0.993640
}

,{
0.179023  , -0.097755 ,   0.179023  ,-1* -0.581550  ,-1*   0.997011 ,
0.179023  , -0.114826 ,   0.179023  ,-1* -0.604823  ,-1*   0.997022 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.592206  ,-1*   0.993640
}

,{
0.179023  , -0.093420 ,   0.179023  ,-1* -0.557497  ,-1*   0.997011 ,
0.179023  , -0.110557 ,   0.179023  ,-1* -0.580859  ,-1*   0.997022 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.568237  ,-1*   0.993640
}

,{
0.179023  , -0.089071 ,   0.179023  ,-1* -0.533356  ,-1*   0.997011 ,
0.179023  , -0.106270 ,   0.179023  ,-1* -0.556804  ,-1*   0.997021 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.544179  ,-1*   0.993640
}

,{
0.179023  , -0.084708 ,   0.179023  ,-1* -0.509131  ,-1*   0.997011 ,
0.179023  , -0.101967 ,   0.179023  ,-1* -0.532660  ,-1*   0.997021 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.520034  ,-1*   0.993640
}

,{
0.179023  , -0.080331 ,   0.179023  ,-1* -0.484826  ,-1*   0.997012 ,
0.179023  , -0.097647 ,   0.179023  ,-1* -0.508432  ,-1*   0.997021 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.495808  ,-1*   0.993640
}

,{
0.179023  , -0.075941 ,   0.179023  ,-1* -0.460444  ,-1*   0.997012 ,
0.179023  , -0.093312 ,   0.179023  ,-1* -0.484124  ,-1*   0.997021 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.471503  ,-1*   0.993640
}

,{
0.179023  , -0.071540 ,   0.179023  ,-1* -0.435989  ,-1*   0.997012 ,
0.179023  , -0.088962 ,   0.179023  ,-1* -0.459740  ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.447124  ,-1*   0.993640
}

,{
0.179023  , -0.067127 ,   0.179023  ,-1* -0.411466  ,-1*   0.997012 ,
0.179023  , -0.084598 ,   0.179023  ,-1* -0.435283  ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.422674  ,-1*   0.993640
}

,{
0.179023  , -0.062704 ,   0.179023  ,-1* -0.386877  ,-1*   0.997013 ,
0.179023  , -0.080221 ,   0.179023  ,-1* -0.410757  ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.398158  ,-1*   0.993640
}

,{
0.179023  , -0.058270 ,   0.179023  ,-1* -0.362227  ,-1*   0.997013 ,
0.179023  , -0.075831 ,   0.179023  ,-1* -0.386167  ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.373578  ,-1*   0.993640
}

,{
0.179023  , -0.053828 ,   0.179023  ,-1* -0.337520  ,-1*   0.997013 ,
0.179023  , -0.071429 ,   0.179023  ,-1* -0.361515  ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.348940  ,-1*   0.993640
}

,{
0.179023  , -0.067016 ,   0.179023  ,-1* -0.336807  ,-1*   0.997019 ,
0.179023  , -0.049377 ,   0.179023  ,-1* -0.312760  ,-1*   0.997013 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.324246  ,-1*   0.993640
}

,{
0.179023  , -0.062593 ,   0.179023  ,-1* -0.312045  ,-1*   0.997019 ,
0.179023  , -0.044918 ,   0.179023  ,-1* -0.287951  ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.299502  ,-1*   0.993640
}

,{
0.179023  , -0.058159 ,   0.179023  ,-1* -0.287234  ,-1*   0.997019 ,
0.179023  , -0.040452 ,   0.179023  ,-1* -0.263096  ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.274710  ,-1*   0.993640
}

,{
0.179023  , -0.053716 ,   0.179023  ,-1* -0.262377  ,-1*   0.997019 ,
0.179023  , -0.035980 ,   0.179023  ,-1* -0.238199  ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.249874  ,-1*   0.993640
}

,{
0.179023  , -0.049265 ,   0.179023  ,-1* -0.237479  ,-1*   0.997018 ,
0.179023  , -0.031502 ,   0.179023  ,-1* -0.213265  ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.224999  ,-1*   0.993640
}

,{
0.179023  , -0.044806 ,   0.179023  ,-1* -0.212544  ,-1*   0.997018 ,
0.179023  , -0.027019 ,   0.179023  ,-1* -0.188297  ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.200089  ,-1*   0.993640
}

,{
0.179023  , -0.040340 ,   0.179023  ,-1* -0.187575  ,-1*   0.997018 ,
0.179023  , -0.022532 ,   0.179023  ,-1* -0.163299  ,-1*   0.997015 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.175147  ,-1*   0.993640
}

,{
0.179023  , -0.035868 ,   0.179023  ,-1* -0.162577  ,-1*   0.997018 ,
0.179023  , -0.018041 ,   0.179023  ,-1* -0.138276  ,-1*   0.997015 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.150177  ,-1*   0.993640
}

,{
0.179023  , -0.031390 ,   0.179023  ,-1* -0.137552  ,-1*   0.997017 ,
0.179023  , -0.013547 ,   0.179023  ,-1* -0.113231  ,-1*   0.997015 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.125184  ,-1*   0.993640
}

,{
0.179023  , -0.026906 ,   0.179023  ,-1* -0.112507  ,-1*   0.997017 ,
0.179023  , -0.009051 ,   0.179023  ,-1* -0.088167  ,-1*   0.997015 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.100171  ,-1*   0.993640
}

,{
0.179023  , -0.022419 ,   0.179023  ,-1* -0.087443  ,-1*   0.997017 ,
0.179023  , -0.004554 ,   0.179023  ,-1* -0.063090  ,-1*   0.997016 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.075142  ,-1*   0.993640
}

,{
0.179023  , -0.017928 ,   0.179023  ,-1* -0.062365  ,-1*   0.997017 ,
0.179023  , -0.000056 ,   0.179023  ,-1* -0.038003  ,-1*   0.997016 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.050101  ,-1*   0.993640
}

,{
0.179023  , -0.013435 ,   0.179023  ,-1* -0.037278  ,-1*   0.997017 ,
0.179023  , 0.004442  ,   0.179023  ,-1* -0.012910  ,-1*   0.997016 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.025053  ,-1*   0.993640
}

,{
0.179023  , 0.008939  ,   0.179023  ,-1* 0.012185 ,-1*   0.997016 ,
0.179023  , -0.008939 ,   0.179023  ,-1* -0.012185  ,-1*   0.997016 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* -0.000000  ,-1*   0.993640
}

,{
0.179023  , 0.013435  ,   0.179023  ,-1* 0.037278 ,-1*   0.997017 ,
0.179023  , -0.004442 ,   0.179023  ,-1* 0.012910 ,-1*   0.997016 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.025053 ,-1*   0.993640
}

,{
0.179023  , 0.017928  ,   0.179023  ,-1* 0.062365 ,-1*   0.997017 ,
0.179023  , 0.000056  ,   0.179023  ,-1* 0.038003 ,-1*   0.997016 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.050101 ,-1*   0.993640
}

,{
0.179023  , 0.022419  ,   0.179023  ,-1* 0.087443 ,-1*   0.997017 ,
0.179023  , 0.004554  ,   0.179023  ,-1* 0.063090 ,-1*   0.997016 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.075142 ,-1*   0.993640
}

,{
0.179023  , 0.026906  ,   0.179023  ,-1* 0.112507 ,-1*   0.997017 ,
0.179023  , 0.009051  ,   0.179023  ,-1* 0.088167 ,-1*   0.997015 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.100171 ,-1*   0.993640
}

,{
0.179023  , 0.031390  ,   0.179023  ,-1* 0.137552 ,-1*   0.997017 ,
0.179023  , 0.013547  ,   0.179023  ,-1* 0.113231 ,-1*   0.997015 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.125184 ,-1*   0.993640
}

,{
0.179023  , 0.035868  ,   0.179023  ,-1* 0.162577 ,-1*   0.997018 ,
0.179023  , 0.018041  ,   0.179023  ,-1* 0.138276 ,-1*   0.997015 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.150177 ,-1*   0.993640
}

,{
0.179023  , 0.040340  ,   0.179023  ,-1* 0.187575 ,-1*   0.997018 ,
0.179023  , 0.022532  ,   0.179023  ,-1* 0.163299 ,-1*   0.997015 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.175147 ,-1*   0.993640
}

,{
0.179023  , 0.044806  ,   0.179023  ,-1* 0.212544 ,-1*   0.997018 ,
0.179023  , 0.027019  ,   0.179023  ,-1* 0.188297 ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.200089 ,-1*   0.993640
}

,{
0.179023  , 0.049265  ,   0.179023  ,-1* 0.237479 ,-1*   0.997018 ,
0.179023  , 0.031502  ,   0.179023  ,-1* 0.213265 ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.224999 ,-1*   0.993640
}

,{
0.179023  , 0.053716  ,   0.179023  ,-1* 0.262377 ,-1*   0.997019 ,
0.179023  , 0.035980  ,   0.179023  ,-1* 0.238199 ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.249874 ,-1*   0.993640
}

,{
0.179023  , 0.058159  ,   0.179023  ,-1* 0.287234 ,-1*   0.997019 ,
0.179023  , 0.040452  ,   0.179023  ,-1* 0.263096 ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.274710 ,-1*   0.993640
}

,{
0.179023  , 0.062593  ,   0.179023  ,-1* 0.312045 ,-1*   0.997019 ,
0.179023  , 0.044918  ,   0.179023  ,-1* 0.287951 ,-1*   0.997014 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.299502 ,-1*   0.993640
}

,{
0.179023  , 0.067016  ,   0.179023  ,-1* 0.336807 ,-1*   0.997019 ,
0.179023  , 0.049377  ,   0.179023  ,-1* 0.312760 ,-1*   0.997013 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.324246 ,-1*   0.993640
}

,{
0.179023  , 0.053828  ,   0.179023  ,-1* 0.337520 ,-1*   0.997013 ,
0.179023  , 0.071429  ,   0.179023  ,-1* 0.361515 ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.348940 ,-1*   0.993640
}

,{
0.179023  , 0.058270  ,   0.179023  ,-1* 0.362227 ,-1*   0.997013 ,
0.179023  , 0.075831  ,   0.179023  ,-1* 0.386167 ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.373578 ,-1*   0.993640
}

,{
0.179023  , 0.062704  ,   0.179023  ,-1* 0.386877 ,-1*   0.997013 ,
0.179023  , 0.080221  ,   0.179023  ,-1* 0.410757 ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.398158 ,-1*   0.993640
}

,{
0.179023  , 0.067127  ,   0.179023  ,-1* 0.411466 ,-1*   0.997012 ,
0.179023  , 0.084598  ,   0.179023  ,-1* 0.435283 ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.422674 ,-1*   0.993640
}

,{
0.179023  , 0.071540  ,   0.179023  ,-1* 0.435989 ,-1*   0.997012 ,
0.179023  , 0.088962  ,   0.179023  ,-1* 0.459740 ,-1*   0.997020 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.447124 ,-1*   0.993640
}

,{
0.179023  , 0.075941  ,   0.179023  ,-1* 0.460444 ,-1*   0.997012 ,
0.179023  , 0.093312  ,   0.179023  ,-1* 0.484124 ,-1*   0.997021 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.471503 ,-1*   0.993640
}

,{
0.179023  , 0.080331  ,   0.179023  ,-1* 0.484826 ,-1*   0.997012 ,
0.179023  , 0.097647  ,   0.179023  ,-1* 0.508432 ,-1*   0.997021 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.495808 ,-1*   0.993640
}

,{
0.179023  , 0.084708  ,   0.179023  ,-1* 0.509131 ,-1*   0.997011 ,
0.179023  , 0.101967  ,   0.179023  ,-1* 0.532660 ,-1*   0.997021 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.520034 ,-1*   0.993640
}

,{
0.179023  , 0.089071  ,   0.179023  ,-1* 0.533356 ,-1*   0.997011 ,
0.179023  , 0.106270  ,   0.179023  ,-1* 0.556804 ,-1*   0.997021 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.544179 ,-1*   0.993640
}

,{
0.179023  , 0.093420  ,   0.179023  ,-1* 0.557497 ,-1*   0.997011 ,
0.179023  , 0.110557  ,   0.179023  ,-1* 0.580859 ,-1*   0.997022 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.568237 ,-1*   0.993640
}

,{
0.179023  , 0.097755  ,   0.179023  ,-1* 0.581550 ,-1*   0.997011 ,
0.179023  , 0.114826  ,   0.179023  ,-1* 0.604823 ,-1*   0.997022 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.592206 ,-1*   0.993640
}

,{
0.179023  , 0.102074  ,   0.179023  ,-1* 0.605511 ,-1*   0.997010 ,
0.179023  , 0.119077  ,   0.179023  ,-1* 0.628692 ,-1*   0.997022 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.616081 ,-1*   0.993640
}

,{
0.179023  , 0.106377  ,   0.179023  ,-1* 0.629376 ,-1*   0.997010 ,
0.179023  , 0.123310  ,   0.179023  ,-1* 0.652461 ,-1*   0.997022 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.639859 ,-1*   0.993640
}

,{
0.179023  , 0.110664  ,   0.179023  ,-1* 0.653142 ,-1*   0.997010 ,
0.179023  , 0.127522  ,   0.179023  ,-1* 0.676127 ,-1*   0.997023 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.663535 ,-1*   0.993640
}

,{
0.179023  , 0.114932  ,   0.179023  ,-1* 0.676805 ,-1*   0.997010 ,
0.179023  , 0.131715  ,   0.179023  ,-1* 0.699686 ,-1*   0.997023 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.687107 ,-1*   0.993640
}

,{
0.179023  , 0.119183  ,   0.179023  ,-1* 0.700361 ,-1*   0.997009 ,
0.179023  , 0.135887  ,   0.179023  ,-1* 0.723135 ,-1*   0.997023 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.710571 ,-1*   0.993640
}

,{
0.179023  , 0.123415  ,   0.179023  ,-1* 0.723806 ,-1*   0.997009 ,
0.179023  , 0.140038  ,   0.179023  ,-1* 0.746470 ,-1*   0.997023 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.733922 ,-1*   0.993640
}

,{
0.179023  , 0.127627  ,   0.179023  ,-1* 0.747137 ,-1*   0.997009 ,
0.179023  , 0.144166  ,   0.179023  ,-1* 0.769687 ,-1*   0.997024 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.757158 ,-1*   0.993640
}

,{
0.179023  , 0.131819  ,   0.179023  ,-1* 0.770350 ,-1*   0.997009 ,
0.179023  , 0.148272  ,   0.179023  ,-1* 0.792782 ,-1*   0.997024 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.780274 ,-1*   0.993640
}

,{
0.179023  , 0.135991  ,   0.179023  ,-1* 0.793441 ,-1*   0.997008 ,
0.179023  , 0.152354  ,   0.179023  ,-1* 0.815752 ,-1*   0.997024 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.803266 ,-1*   0.993640
}

,{
0.179023  , 0.140141  ,   0.179023  ,-1* 0.816407 ,-1*   0.997008 ,
0.179023  , 0.156412  ,   0.179023  ,-1* 0.838593 ,-1*   0.997025 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.826132 ,-1*   0.993640
}

,{
0.179023  , 0.144268  ,   0.179023  ,-1* 0.839245 ,-1*   0.997008 ,
0.179023  , 0.160445  ,   0.179023  ,-1* 0.861302 ,-1*   0.997025 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.848867 ,-1*   0.993640
}

,{
0.179023  , 0.148373  ,   0.179023  ,-1* 0.861949 ,-1*   0.997007 ,
0.179023  , 0.164453  ,   0.179023  ,-1* 0.883875 ,-1*   0.997025 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.871469 ,-1*   0.993640
}

,{
0.179023  , 0.152455  ,   0.179023  ,-1* 0.884518 ,-1*   0.997007 ,
0.179023  , 0.168436  ,   0.179023  ,-1* 0.906308 ,-1*   0.997025 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.893932 ,-1*   0.993640
}

,{
0.179023  , 0.156512  ,   0.179023  ,-1* 0.906946 ,-1*   0.997007 ,
0.179023  , 0.172391  ,   0.179023  ,-1* 0.928599 ,-1*   0.997026 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.916255 ,-1*   0.993640
}

,{
0.179023  , 0.160545  ,   0.179023  ,-1* 0.929232 ,-1*   0.997007 ,
0.179023  , 0.176319  ,   0.179023  ,-1* 0.950742 ,-1*   0.997026 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.938433 ,-1*   0.993640
}

,{
0.179023  , 0.164552  ,   0.179023  ,-1* 0.951371 ,-1*   0.997006 ,
0.179023  , 0.180220  ,   0.179023  ,-1* 0.972736 ,-1*   0.997026 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.960462 ,-1*   0.993640
}

,{
0.179023  , 0.168534  ,   0.179023  ,-1* 0.973359 ,-1*   0.997006 ,
0.179023  , 0.184092  ,   0.179023  ,-1* 0.994576 ,-1*   0.997027 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 0.982340 ,-1*   0.993640
}

,{
0.179023  , 0.172489  ,   0.179023  ,-1* 0.995194 ,-1*   0.997006 ,
0.179023  , 0.187935  ,   0.179023  ,-1* 1.016258 ,-1*   0.997027 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.004063 ,-1*   0.993640
}

,{
0.179023  , 0.176416  ,   0.179023  ,-1* 1.016872 ,-1*   0.997005 ,
0.179023  , 0.191748  ,   0.179023  ,-1* 1.037781 ,-1*   0.997027 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.025627 ,-1*   0.993640
}

,{
0.179023  , 0.180316  ,   0.179023  ,-1* 1.038389 ,-1*   0.997005 ,
0.179023  , 0.195531  ,   0.179023  ,-1* 1.059139 ,-1*   0.997028 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.047030 ,-1*   0.993640
}

,{
0.179023  , 0.184187  ,   0.179023  ,-1* 1.059742 ,-1*   0.997005 ,
0.179023  , 0.199283  ,   0.179023  ,-1* 1.080330 ,-1*   0.997028 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.068267 ,-1*   0.993640
}

,{
0.179023  , 0.188029  ,   0.179023  ,-1* 1.080928 ,-1*   0.997004 ,
0.179023  , 0.203004  ,   0.179023  ,-1* 1.101351 ,-1*   0.997028 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.089335 ,-1*   0.993640
}

,{
0.179023  , 0.191842  ,   0.179023  ,-1* 1.101943 ,-1*   0.997004 ,
0.179023  , 0.206693  ,   0.179023  ,-1* 1.122198 ,-1*   0.997028 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.110231 ,-1*   0.993640
}

,{
0.179023  , 0.195624  ,   0.179023  ,-1* 1.122784 ,-1*   0.997004 ,
0.179023  , 0.210349  ,   0.179023  ,-1* 1.142867 ,-1*   0.997029 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.130952 ,-1*   0.993640
}

,{
0.179023  , 0.199375  ,   0.179023  ,-1* 1.143448 ,-1*   0.997003 ,
0.179023  , 0.213971  ,   0.179023  ,-1* 1.163356 ,-1*   0.997029 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.151495 ,-1*   0.993640
}

,{
0.179023  , 0.203095  ,   0.179023  ,-1* 1.163931 ,-1*   0.997003 ,
0.179023  , 0.217560  ,   0.179023  ,-1* 1.183662 ,-1*   0.997030 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.171855 ,-1*   0.993640
}

,{
0.179023  , 0.206782  ,   0.179023  ,-1* 1.184230 ,-1*   0.997003 ,
0.179023  , 0.221115  ,   0.179023  ,-1* 1.203780 ,-1*   0.997030 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.192031 ,-1*   0.993640
}

,{
0.179023  , 0.210438  ,   0.179023  ,-1* 1.204342 ,-1*   0.997002 ,
0.179023  , 0.224635  ,   0.179023  ,-1* 1.223709 ,-1*   0.997030 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.212018 ,-1*   0.993640
}

,{
0.179023  , 0.214059  ,   0.179023  ,-1* 1.224265 ,-1*   0.997002 ,
0.179023  , 0.228119  ,   0.179023  ,-1* 1.243444 ,-1*   0.997031 ,
0.006263  , 0.000000  ,  -0.006263  ,-1* 1.231814 ,-1*   0.993640
}
};

uint32_t Message[FFT_SIZE];
float32_t FilterOutput[FFT_SIZE];
float32_t *FiltOut = FilterOutput;
float32_t FilterPlot[2*FFT_SIZE];
float32_t *FiltPlot = FilterPlot;
float32_t FilterMagnitude[FFT_SIZE/2];
float32_t *FiltMag = FilterMagnitude;
float32_t toDAC[FFT_SIZE];
float32_t to[FFT_SIZE];

/**
 * Modulated Sine Wave values
 */
const float32_t sineWave[] = {
		1.5,2.2489,1.6875,0.78871,1.1322,2.128,2.0295,0.99688,0.83814,1.8435,2.2557,1.3415,0.69567,1.4591,2.3035,1.7424,0.74793,1.0667,2.1522,2.1014,0.99093,0.76455,1.8307,2.3263,1.3723,0.6328,1.4122,2.3545,1.8025,0.71206,0.99728,2.1705,2.1756,0.99155,0.69034,1.8112,2.3957,1.4096,0.57278,1.3595,2.4012,1.8672,0.68178,0.92471,2.1823,2.2513,0.99903,0.61639,1.7848,2.463,1.4532,0.51646,1.3014,2.4428,1.936,0.6577,0.84968,2.1872,2.3277,1.0136,0.54359,1.7516,2.5274,1.5029,0.46467,1.2384,2.4786,2.0082,0.64035,0.77298,2.185,2.4039,1.0353,0.47287,1.7118,2.588,1.5583,0.41817,1.1711,2.5079,2.083,0.63017,0.69547,2.1754,2.479,1.0642,0.40512,1.6656,2.644,1.6188,0.3777,1.1002,2.5302,2.1597,0.62748,0.61804,2.1582,2.5521,1.1001,0.34122,1.6133,2.6945,1.684,0.34387,1.0263,2.5451,2.2374,0.6325,0.54161,2.1336,2.6222,1.1427,0.28202,1.5556,2.7389,1.7532,0.31724,0.95029,2.5522,2.3153,0.64534,0.46711,2.1016,2.6885,1.1916,0.22833,1.4928,2.7765,1.8256,0.29827,0.87306,2.5514,2.3922,0.66599,0.39545,2.0626,2.7501,1.2465,0.18086,1.4258,2.8067,1.9004,0.2873,0.79549,2.5424,2.4675,0.69432,0.32755,2.0168,2.8062,1.3067,0.14029,1.3552,2.829,1.9767,0.28457,0.71851,2.5253,2.54,0.73008,0.26427,1.9648,2.856,1.3715,0.10718,1.2818,2.8432,2.0537,0.29022,0.64306,2.5002,2.6089,0.77292,0.20642,1.907,2.899,1.4403,0.08201,1.2066,2.849,2.1303,0.30424,0.57007,2.4674,2.6734,0.82237,0.15475,1.8443,2.9344,1.5122,0.065146,1.1304,2.8462,2.2057,0.32651,0.50047,2.4271,2.7326,0.87787,0.10995,1.7772,2.9618,1.5863,0.056847,1.0542,2.8348,2.2789,0.35683,0.43513,2.3799,2.7857,0.93876,0.072604,1.7067,2.9809,1.6617,0.057257,0.97896,2.8149,2.349,0.39482,0.37487,2.3264,2.8321,1.0043,0.043202,1.6336,2.9914,1.7375,0.066398,0.90554,2.7868,2.4151,0.44006,0.32048,2.2671,2.8711,1.0737,0.022134,1.5588,2.9931,1.8127,0.084174,0.83491,2.7507,2.4764,0.49197,0.27264,2.2028,2.9023,1.146,0.0096749,1.4832,2.986,1.8865,0.11037,0.76795,2.7072,2.5321,0.54992,0.23195,2.1343,2.9252,1.2205,0.0059855,1.4078,2.9702,1.9578,0.14467,0.70551,2.6567,2.5815,0.61318,0.19893,2.0625,2.9397,1.2961,0.011107,1.3335,2.9458,2.0258,0.18661,0.64836,2.6,2.624,0.68094,0.17398,1.9882,2.9454,1.3718,0.02496,1.2613,2.9133,2.0896,0.23568,0.59721,2.5377,2.659,0.75236,0.15739,1.9125,2.9424,1.4468,0.04735,1.1921,2.873,2.1484,0.29123,0.55268,2.4706,2.6862,0.82653,0.14933,1.8362,2.9308,1.5201,0.077964,1.1266,2.8254,2.2016,0.35255,0.51529,2.3995,2.7053,0.90251,0.14987,1.7603,2.9106,1.5909,0.11638,1.0658,2.7713,2.2486,0.41885,0.48545,2.3255,2.7161,0.97938,0.15895,1.6857,2.8823,1.6582,0.16208,1.0102,2.7112,2.2887,0.48929,0.46347,2.2494,2.7184,1.0562,0.17639,1.6134,2.8462,1.7213,0.21445,0.96055,2.646,2.3216,0.56298,0.44955,2.172,2.7124,1.132,0.20189,1.5441,2.8029,1.7795,0.27279,0.91736,2.5766,2.3469,0.639,0.44377,2.0945,2.6983,1.2059,0.23505,1.4787,2.7529,1.8321,0.33632,0.88107,2.5037,2.3645,0.71642,0.44607,2.0177,2.6762,1.2771,0.27537,1.4178,2.6969,1.8786,0.40422,0.85199,2.4283,2.3742,0.79429,0.4563,1.9424,2.6467,1.3448,0.32226,1.3622,2.6358,1.9185,0.47562,0.83032,2.3514,2.3762,0.87172,0.47419,1.8696,2.6102,1.4083,0.37504,1.3122,2.5702,1.9517,0.54961,0.81615,2.2738,2.3705,0.94781,0.49935,1.8,2.5672,1.4668,0.43295,1.2685,2.5012,1.9777,0.62527,0.80947,2.1965,2.3574,1.0217,0.53131,1.7343,2.5185,1.52,0.4952,1.2313,2.4295,1.9966,0.7017,0.81013,2.1203,2.3373,1.0927,0.56949,1.6732,2.4648,1.5673,0.56092,1.2008,2.3561,2.0083,0.77798,0.81788,2.0461,2.3106,1.1599,0.61324,1.6172,2.4068,1.6085,0.62923,1.1771,2.2819,2.013,0.85324,0.83235,1.9747,2.278,1.2229,0.66182,1.5667,2.3455,1.6432,0.69925,1.1603,2.2077,2.0109,0.92666,0.85308,1.9067,2.24,1.281,0.71447,1.5221,2.2817,1.6714,0.77007,1.1502,2.1346,2.0024,0.99748,0.87954,1.8429,2.1974,1.3339,0.77034,1.4837,2.2162,1.6931,0.84082,1.1465,2.0631,1.988,1.065,0.91107,1.7836,2.151,1.3811,0.8286,1.4514,2.15,1.7085,0.91065,1.1489,1.9942,1.9681,1.1285,0.947,1.7294,2.1015,1.4225,0.88836,1.4253,2.0839,1.7177,0.97874,1.157,1.9285,1.9434,1.1877,0.98655,1.6806,2.0498,1.4579,0.94876,1.4054,2.0188,1.7211,1.0444,1.1703,1.8666,1.9146,1.2419,1.0289,1.6375,1.9967,1.4874,1.009,1.3913,1.9554,1.719,1.1068,1.1881,1.8091,1.8823,1.2909,1.0733,1.6,1.9432,1.5111,1.0681,1.3827,1.8945,1.7122,1.1655,1.2097,1.7562,1.8475,1.3345,1.1189,1.5682,1.89,1.5292,1.1255,1.3792,1.8368,1.701,1.22,1.2345,1.7085,1.8109,1.3726,1.1648,1.542,1.8379,1.542,1.1803,1.3804,1.7828,1.6863,1.2698,1.2617,1.666,1.7733,1.4052,1.2102,1.5212,1.7877,1.5499,1.232,1.3855,1.7329,1.6686,1.3146,1.2904,1.6289,1.7356,1.4324,1.2544,1.5055,1.7401,1.5535,1.2799,1.394,1.6877,1.6489,1.3543,1.3199,1.5972,1.6985,1.4544,1.2965,1.4944,1.6957,1.5534,1.3236,1.4052,1.6474,1.6278,1.3887,1.3493,1.5707,1.6628,1.4716,1.3359,1.4874,1.6552,1.5501,1.3627,1.4182,1.6122,1.6061,1.4179,1.3779,1.5492,1.6293,1.4843,1.372,1.4839,1.6188,1.5444,1.397,1.4324,1.5822,1.5847,1.442,1.405,1.5323,1.5986,1.4931,1.4043,1.4833,1.5871,1.537,1.4262,1.4469,1.5573,1.5643,1.4613,1.4297,1.5197,1.5713,1.4986,1.4323,1.4849,1.5602,1.5287,1.4503,1.461,1.5373,1.5456,1.476,1.4515,1.5108,1.5479,1.5014,1.4557,1.488,1.5383,1.5203,1.4694,1.4739,1.5221,1.5294,1.4867,1.4698,1.505,1.5288,1.5022,1.4742,1.4919,1.5215,1.5125,1.4835,1.4849,1.5112,1.5162,1.4938,1.4841,1.5018,1.5144,1.5018,1.4878,1.4956,1.5096,1.506,1.4931,1.4933,1.5043,1.5066,1.4979,1.494,1.5004,1.5049,1.5008,1.4963,1.4986,1.5026,1.5016,1.4985,1.4985,1.5008,1.5012,1.4997,1.4992,1.5,1.5004,1.5001,1.4999,1.5,1.5,1.5,1.5,1.5,1.5001,1.5002,1.4999,1.4995,1.5,1.5009,1.5003,1.4987,1.4991,1.5016,1.5017,1.4983,1.4972,1.5015,1.504,1.4992,1.4948,1.4995,1.5062,1.5023,1.4931,1.4954,1.5069,1.5073,1.4939,1.4899,1.5044,1.5127,1.4984,1.4851,1.4979,1.5163,1.5067,1.4835,1.4882,1.5153,1.5171,1.4875,1.4778,1.5079,1.5265,1.4982,1.4705,1.4943,1.5307,1.5141,1.4703,1.477,1.5262,1.5316,1.4799,1.4607,1.5115,1.5452,1.4993,1.4514,1.4882,1.549,1.5252,1.4542,1.4614,1.5389,1.5511,1.4718,1.4385,1.5142,1.5688,1.5026,1.4279,1.4788,1.5707,1.5404,1.4357,1.441,1.5526,1.5755,1.4639,1.4114,1.5153,1.5969,1.5086,1.4006,1.4657,1.5953,1.5602,1.4156,1.4156,1.5667,1.6051,1.457,1.3794,1.5142,1.6293,1.5181,1.37,1.4482,1.6221,1.5849,1.3945,1.3851,1.5804,1.6397,1.452,1.3429,1.51,1.6654,1.5315,1.3366,1.426,1.6504,1.6146,1.3734,1.3494,1.5928,1.6791,1.4494,1.3022,1.5023,1.7048,1.5494,1.3012,1.3988,1.6794,1.6496,1.3529,1.3087,1.6032,1.7231,1.45,1.2578,1.4903,1.7467,1.5722,1.2645,1.3664,1.7083,1.6898,1.3338,1.2631,1.6109,1.7712,1.4545,1.2102,1.4737,1.7906,1.6002,1.2272,1.3286,1.7364,1.7352,1.317,1.213,1.6152,1.8229,1.4634,1.1602,1.452,1.8356,1.6336,1.1902,1.2854,1.7628,1.7855,1.3032,1.1587,1.6153,1.8778,1.4772,1.1084,1.4249,1.8811,1.6725,1.1543,1.237,1.7867,1.8404,1.293,1.1007,1.6108,1.935,1.4963,1.0555,1.3922,1.926,1.7169,1.1203,1.1836,1.8074,1.8995,1.2872,1.0398,1.6012,1.994,1.521,1.0024,1.3537,1.9697,1.7667,1.089,1.1255,1.8241,1.9622,1.2863,0.97639,1.5859,2.0539,1.5516,0.94993,1.3096,2.0113,1.8217,1.0612,1.0632,1.8362,2.028,1.2909,0.9114,1.5648,2.1139,1.5881,0.89894,1.2599,2.0499,1.8814,1.0376,0.9971,1.8431,2.0961,1.3013,0.84557,1.5375,2.1731,1.6305,0.85027,1.2049,2.0848,1.9456,1.0189,0.92792,1.8443,2.1659,1.3179,0.77974,1.5041,2.2306,1.6788,0.80475,1.1449,2.1151,2.0136,1.0057,0.85633,1.8393,2.2365,1.3409,0.71479,1.4645,2.2857,1.7326,0.76321,1.0804,2.1404,2.0847,0.99855,0.78312,1.8278,2.307,1.3704,0.6516,1.4188,2.3374,1.7915,0.72638,1.0118,2.1598,2.1584,0.99785,0.70909,1.8096,2.3766,1.4064,0.59104,1.3673,2.385,1.8553,0.69499,0.93993,2.1729,2.2338,1.0039,0.63511,1.7846,2.4443,1.4487,0.53398,1.3104,2.4276,1.9232,0.66965,0.86541,2.1793,2.31,1.0171,0.56209,1.7528,2.5093,1.4971,0.48126,1.2484,2.4646,1.9947,0.65092,0.78904,2.1785,2.3863,1.0373,0.49092,1.7144,2.5707,1.5513,0.43366,1.1819,2.4952,2.0691,0.63925,0.71166,2.1704,2.4617,1.0647,0.42252,1.6695,2.6277,1.6109,0.3919,1.1117,2.519,2.1454,0.63499,0.63416,2.1548,2.5352,1.0991,0.35777,1.6184,2.6794,1.6751,0.35665,1.0384,2.5355,2.223,0.63839,0.55746,2.1318,2.606,1.1404,0.29752,1.5618,2.7251,1.7435,0.32847,0.96275,2.5443,2.3009,0.64959,0.48247,2.1013,2.6732,1.188,0.24259,1.5,2.7641,1.8153,0.30784,0.8857,2.5451,2.3781,0.66859,0.41012,2.0637,2.7359,1.2417,0.19373,1.4338,2.796,1.8897,0.29514,0.8081,2.5379,2.4538,0.6953,0.34132,2.0194,2.7932,1.3008,0.15162,1.3639,2.8201,1.9658,0.29063,0.73089,2.5225,2.527,0.7295,0.27695,1.9686,2.8445,1.3647,0.11684,1.291,2.8361,2.0427,0.29445,0.655,2.4991,2.5968,0.77085,0.21783,1.912,2.889,1.4327,0.089894,1.2161,2.8437,2.1195,0.30665,0.58137,2.4679,2.6624,0.81892,0.16473,1.8503,2.9261,1.504,0.071177,1.1401,2.8428,2.1953,0.32714,0.51093,2.4293,2.7228,0.87316,0.11835,1.7841,2.9554,1.5777,0.060971,1.0638,2.8333,2.2691,0.35571,0.44455,2.3836,2.7773,0.93294,0.079298,1.7143,2.9764,1.653,0.059447,0.98818,2.8152,2.34,0.39205,0.38309,2.3313,2.8253,0.99753,0.048089,1.6416,2.9888,1.7288,0.066654,0.91425,2.7889,2.4071,0.43573,0.32732,2.2733,2.866,1.0661,0.025136,1.5671,2.9924,1.8042,0.082525,0.84291,2.7546,2.4695,0.48622,0.27796,2.21,2.899,1.1379,0.01074,1.4916,2.9873,1.8784,0.10687,0.77506,2.7127,2.5265,0.54288,0.23563,2.1424,2.9238,1.212,0.0050897,1.4161,2.9734,1.9503,0.13939,0.71155,2.6637,2.5773,0.60502,0.20087,2.0712,2.9401,1.2874,0.0082523,1.3415,2.9509,2.0191,0.17968,0.65317,2.6083,2.6214,0.67184,0.17409,1.9975,2.9478,1.3632,0.020177,1.2688,2.9202,2.0839,0.22721,0.60065,2.5472,2.6581,0.74251,0.15563,1.922,2.9468,1.4384,0.040694,1.1988,2.8815,2.1439,0.28137,0.55462,2.4811,2.6871,0.81612,0.14569,1.8458,2.937,1.5121,0.069519,1.1325,2.8355,2.1984,0.34146,0.51563,2.4109,2.708,0.89177,0.14434,1.7697,2.9187,1.5835,0.10626,1.0706,2.7828,2.2467,0.40672,0.48412,2.3374,2.7205,0.96849,0.15157,1.6948,2.8922,1.6516,0.1504,1.0138,2.724,2.2883,0.47631,0.46042,2.2617,2.7247,1.0454,0.16721,1.6219,2.8577,1.7156,0.20137,0.96286,2.6599,2.3228,0.54935,0.44476,2.1846,2.7205,1.1214,0.19099,1.5519,2.8159,1.7749,0.25847,0.91826,2.5912,2.3498,0.62493,0.43723,2.107,2.7081,1.1958,0.22255,1.4856,2.7673,1.8287,0.32095,0.88048,2.519,2.369,0.70211,0.43783,2.03,2.6877,1.2677,0.2614,1.4238,2.7125,1.8766,0.38799,0.84986,2.4441,2.3804,0.77996,0.44641,1.9543,2.6597,1.3361,0.30697,1.367,2.6524,1.9179,0.45873,0.82663,2.3674,2.384,0.85756,0.46273,1.8809,2.6246,1.4005,0.35859,1.3158,2.5877,1.9525,0.53228,0.81091,2.2899,2.3798,0.93402,0.48644,1.8105,2.5829,1.4602,0.41553,1.2708,2.5193,1.98,0.60771,0.8027,2.2124,2.3682,1.0085,0.51707,1.744,2.5353,1.5145,0.477,1.2322,2.448,2.0004,0.6841,0.80188,2.1359,2.3495,1.0801,0.55407,1.6818,2.4824,1.5631,0.54215,1.2003,2.3748,2.0135,0.76056,0.80823,2.0611,2.3241,1.1483,0.59681,1.6247,2.4252,1.6055,0.6101,1.1752,2.3006,2.0196,0.8362,0.82142,1.989,2.2926,1.2122,0.64457,1.5731,2.3644,1.6416,0.67996,1.157,2.2262,2.0189,0.91017,0.841,1.9202,2.2555,1.2714,0.69658,1.5272,2.3009,1.6712,0.75084,1.1456,2.1526,2.0116,0.9817,0.86644,1.8553,2.2137,1.3255,0.75202,1.4874,2.2355,1.6942,0.82185,1.1406,2.0806,1.9982,1.0501,0.89713,1.795,2.1678,1.3739,0.81004,1.4539,2.1692,1.7108,0.89212,1.1419,2.0109,1.9793,1.1147,0.93238,1.7396,2.1186,1.4166,0.86979,1.4265,2.1028,1.7212,0.96085,1.149,1.9443,1.9553,1.1749,0.97145,1.6896,2.0671,1.4533,0.93038,1.4054,2.0371,1.7257,1.0273,1.1614,1.8814,1.9271,1.2303,1.0136,1.6452,2.014,1.4841,0.99096,1.3901,1.9731,1.7246,1.0907,1.1785,1.8227,1.8953,1.2806,1.0579,1.6064,1.9602,1.509,1.0507,1.3805,1.9113,1.7186,1.1505,1.1996,1.7687,1.8607,1.3255,1.1036,1.5734,1.9065,1.5282,1.1088,1.3761,1.8525,1.7081,1.2061,1.224,1.7197,1.8241,1.3649,1.1498,1.546,1.8538,1.542,1.1646,1.3764,1.7974,1.6938,1.2572,1.251,1.6759,1.7863,1.3987,1.1957,1.5241,1.8028,1.5509,1.2173,1.3809,1.7463,1.6765,1.3033,1.2798,1.6375,1.7482,1.4271,1.2405,1.5073,1.7542,1.5553,1.2664,1.3889,1.6998,1.6569,1.3444,1.3095,1.6044,1.7105,1.4503,1.2835,1.4952,1.7087,1.5558,1.3114,1.3998,1.6581,1.6357,1.3801,1.3393,1.5766,1.6741,1.4685,1.324,1.4874,1.6669,1.553,1.3519,1.4127,1.6215,1.6138,1.4107,1.3685,1.5539,1.6397,1.4822,1.3613,1.4833,1.6292,1.5476,1.3875,1.427,1.5901,1.592,1.4361,1.3964,1.536,1.6079,1.4919,1.3949,1.4822,1.596,1.5403,1.4182,1.4417,1.5638,1.5709,1.4566,1.4221,1.5224,1.5794,1.498,1.4243,1.4835,1.5677,1.5319,1.4438,1.4563,1.5425,1.5515,1.4724,1.445,1.5126,1.5547,1.5013,1.4491,1.4865,1.5443,1.5232,1.4643,1.4698,1.526,1.5343,1.4841,1.4645,1.5062,1.5342,1.5025,1.4691,1.4904,1.526,1.515,1.4799,1.4816,1.5139,1.52,1.4921,1.4801,1.5024,1.5184,1.5022,1.4842,1.4944,1.5127,1.5079,1.4907,1.4909,1.5059,1.5092,1.497,1.4915,1.5006,1.5073,1.5012,1.4942,1.4977,1.5042,1.5028,1.4973,1.4972,1.5015,1.5024,1.4994,1.4981,1.5,1.5013,1.5002,1.4993,1.4997,1.5003,1.5002,1.4999,1.4999,1.5,1.5,1.5,1.5,1.5,1.5002,1.5001,1.4995,1.4997,1.5007,1.5008,1.4991,1.4985,1.5008,1.5023,1.4995,1.4968,1.4997,1.5041,1.5015,1.4953,1.4968,1.5049,1.5052,1.4956,1.4926,1.5033,1.5095,1.4987,1.4886,1.4984,1.5127,1.5052,1.4869,1.4907,1.5123,1.5137,1.4898,1.482,1.5066,1.5217,1.4984,1.4755,1.4954,1.5257,1.5117,1.4749,1.4807,1.5224,1.5269,1.4827,1.4664,1.5101,1.539,1.4992,1.4578,1.49,1.5428,1.5218,1.4597,1.4663,1.5344,1.5449,1.4748,1.4457,1.5129,1.5611,1.5019,1.4357,1.4815,1.5634,1.5359,1.4421,1.4472,1.5477,1.5679,1.467,1.42,1.5143,1.5878,1.5073,1.4096,1.4693,1.5871,1.5544,1.4226,1.4233,1.5616,1.596,1.46,1.3895,1.5137,1.6189,1.5159,1.38,1.4529,1.6131,1.5778,1.402,1.3942,1.5751,1.6291,1.4547,1.3543,1.5102,1.6538,1.5284,1.3476,1.4319,1.6407,1.6062,1.3811,1.3599,1.5877,1.6672,1.4516,1.3149,1.5032,1.6921,1.5453,1.313,1.406,1.6693,1.6398,1.3607,1.3206,1.5984,1.7098,1.4516,1.2716,1.4922,1.7332,1.5669,1.2768,1.3748,1.698,1.6787,1.3415,1.2763,1.6065,1.7567,1.4553,1.2251,1.4766,1.7764,1.5937,1.24,1.3384,1.726,1.7227,1.3244,1.2274,1.6114,1.8074,1.4633,1.1758,1.456,1.8209,1.6258,1.2032,1.2965,1.7525,1.7717,1.31,1.1743,1.6123,1.8613,1.476,1.1247,1.4301,1.866,1.6634,1.1673,1.2494,1.7768,1.8254,1.2992,1.1174,1.6088,1.9178,1.494,1.0723,1.3986,1.9108,1.7066,1.1331,1.1972,1.798,1.8834,1.2926,1.0572,1.6001,1.9762,1.5176,1.0195,1.3615,1.9545,1.7551,1.1014,1.1403,1.8154,1.9452,1.2908,0.99459,1.586,2.0356,1.5469,0.96707,1.3186,1.9963,1.8089,1.073,1.079,1.8284,2.0102,1.2943,0.93013,1.5661,2.0954,1.5821,0.91594,1.2702,2.0354,1.8675,1.0486,1.0138,1.8363,2.0777,1.3035,0.86464,1.5401,2.1546,1.6233,0.86694,1.2164,2.0709,1.9306,1.029,0.94542,1.8386,2.147,1.3189,0.79896,1.508,2.2124,1.6703,0.82089,1.1574,2.1022,1.9977,1.0147,0.87444,1.8348,2.2172,1.3406,0.73394,1.4697,2.2679,1.7229,0.77862,1.0939,2.1284,2.0682,1.0064,0.80165,1.8246,2.2877,1.3687,0.67047,1.4253,2.3202,1.7808,0.74089,1.0262,2.149,2.1413,1.0044,0.72785,1.8078,2.3574,1.4033,0.60943,1.375,2.3686,1.8435,0.70842,0.95507,2.1633,2.2163,1.0091,0.6539,1.7842,2.4254,1.4444,0.55169,1.3191,2.4122,1.9106,0.68186,0.8811,2.1711,2.2923,1.0208,0.58069,1.7538,2.491,1.4915,0.49808,1.2582,2.4503,1.9813,0.66178,0.80511,2.1718,2.3686,1.0396,0.50913,1.7167,2.5532,1.5446,0.44941,1.1927,2.4822,2.0551,0.64864,0.72791,2.1652,2.4442,1.0655,0.44013,1.6731,2.6111,1.603,0.40642,1.1232,2.5075,2.1311,0.64284,0.65039,2.1511,2.5181,1.0985,0.37457,1.6233,2.6639,1.6664,0.36978,1.0504,2.5255,2.2085,0.64464,0.57346,2.1296,2.5896,1.1383,0.31332,1.5678,2.7109,1.7339,0.34009,0.97522,2.5359,2.2864,0.65419,0.49803,2.1007,2.6576,1.1847,0.25721,1.5071,2.7514,1.8051,0.31783,0.89839,2.5384,2.3638,0.67155,0.42503,2.0646,2.7213,1.2371,0.20699,1.4417,2.7849,1.879,0.30341,0.82081,2.5329,2.44,0.69664,0.35538,2.0216,2.7799,1.2951,0.16337,1.3725,2.8107,1.9548,0.29712,0.74342,2.5193,2.5138,0.72926,0.28997,1.9722,2.8325,1.3581,0.12695,1.3002,2.8285,2.0316,0.29913,0.66714,2.4976,2.5845,0.76911,0.22962,1.9168,2.8786,1.4253,0.09825,1.2257,2.8379,2.1086,0.30952,0.59291,2.4681,2.651,0.81577,0.17512,1.8561,2.9174,1.496,0.077697,1.1497,2.8389,2.1847,0.32821,0.52166,2.4311,2.7127,0.86873,0.12719,1.7908,2.9484,1.5692,0.065596,1.0734,2.8312,2.259,0.35503,0.45429,2.3868,2.7686,0.92736,0.086464,1.7217,2.9713,1.6442,0.062142,0.99753,2.8151,2.3307,0.38969,0.39165,2.336,2.818,0.99097,0.053469,1.6496,2.9856,1.72,0.067415,0.92314,2.7906,2.3987,0.43179,0.33454,2.2791,2.8604,1.0588,0.028646,1.5754,2.9912,1.7957,0.081373,0.85114,2.758,2.4623,0.48082,0.2837,2.217,2.8952,1.1299,0.012324,1.5,2.988,1.8702,0.10386,0.78243,2.7177,2.5205,0.53617,0.23975,2.1502,2.9218,1.2036,0.0047146,1.4244,2.9761,1.9427,0.13459,0.71788,2.6703,2.5728,0.59715,0.20326,2.0798,2.9401,1.2787,0.0059149,1.3496,2.9555,2.0122,0.17318,0.6583,2.6163,2.6184,0.66299,0.17469,2.0066,2.9497,1.3545,0.015901,1.2764,2.9265,2.078,0.21914,0.60443,2.5563,2.6568,0.73287,0.15437,1.9314,2.9506,1.4299,0.03453,1.2057,2.8896,2.1391,0.27188,0.55693,2.4913,2.6875,0.80589,0.14253,1.8553,2.9428,1.504,0.061543,1.1385,2.8452,2.1948,0.33071,0.51636,2.4219,2.7102,0.88114,0.13929,1.7791,2.9263,1.576,0.096569,1.0756,2.7939,2.2446,0.39488,0.48319,2.3492,2.7246,0.95768,0.14465,1.7039,2.9016,1.6448,0.13913,1.0177,2.7364,2.2877,0.46358,0.45778,2.2739,2.7306,1.0346,0.15847,1.6306,2.8688,1.7098,0.18865,0.96545,2.6734,2.3237,0.53592,0.44037,2.197,2.7282,1.1109,0.18052,1.5599,2.8285,1.7701,0.24448,0.91946,2.6057,2.3523,0.61101,0.4311,2.1195,2.7175,1.1857,0.21045,1.4928,2.7813,1.8252,0.30586,0.8802,2.5342,2.3732,0.68791,0.42997,2.0423,2.6988,1.2581,0.24779,1.4299,2.7278,1.8743,0.372,0.84805,2.4598,2.3862,0.76569,0.43689,1.9662,2.6724,1.3273,0.29199,1.372,2.6688,1.917,0.44204,0.82325,2.3834,2.3914,0.84342,0.45162,1.8923,2.6387,1.3927,0.34242,1.3196,2.6049,1.9531,0.51509,0.80597,2.3059,2.3889,0.9202,0.47384,1.8212,2.5983,1.4533,0.39834,1.2733,2.5372,1.982,0.59023,0.79622,2.2283,2.3788,0.99517,0.50311,1.7538,2.5518,1.5088,0.45898,1.2333,2.4664,2.0039,0.66655,0.79391,2.1515,2.3614,1.0675,0.53889,1.6907,2.4999,1.5587,0.52351,1.2,2.3934,2.0185,0.74314,0.79885,2.0762,2.3373,1.1365,0.58057,1.6324,2.4434,1.6024,0.59105,1.1736,2.3192,2.026,0.8191,0.81072,2.0034,2.3069,1.2014,0.62746,1.5796,2.3832,1.6398,0.66071,1.154,2.2447,2.0266,0.89359,0.8291,1.9338,2.2708,1.2617,0.67878,1.5325,2.32,1.6707,0.73159,1.1412,2.1708,2.0205,0.9658,0.85349,1.868,2.2298,1.3169,0.73374,1.4914,2.2548,1.6951,0.80281,1.135,2.0982,2.0083,1.035,0.88329,1.8066,2.1845,1.3666,0.79149,1.4566,2.1884,1.713,0.87349,1.1351,2.0278,1.9903,1.1006,0.91782,1.7501,2.1358,1.4105,0.85116,1.4279,2.1217,1.7245,0.94281,1.1412,1.9604,1.9672,1.1619,0.95637,1.6988,2.0844,1.4485,0.91189,1.4055,2.0556,1.7301,1.01,1.1526,1.8964,1.9396,1.2185,0.99814,1.6531,2.0313,1.4805,0.9728,1.3891,1.9909,1.7301,1.0743,1.1689,1.8366,1.9082,1.27,1.0423,1.613,1.9773,1.5067,1.0331,1.3784,1.9283,1.7249,1.1352,1.1895,1.7814,1.8739,1.3162,1.0881,1.5788,1.9232,1.527,1.0919,1.373,1.8686,1.7151,1.192,1.2135,1.7311,1.8374,1.3568,1.1346,1.5502,1.8699,1.5419,1.1485,1.3725,1.8123,1.7014,1.2443,1.2403,1.686,1.7995,1.392,1.181,1.5271,1.8181,1.5518,1.2023,1.3763,1.76,1.6845,1.2918,1.269,1.6462,1.761,1.4216,1.2265,1.5092,1.7686,1.557,1.2526,1.3838,1.7122,1.665,1.3341,1.2989,1.6119,1.7229,1.4459,1.2703,1.4962,1.722,1.5581,1.2988,1.3943,1.6692,1.6439,1.3713,1.3291,1.5828,1.6858,1.4653,1.3118,1.4875,1.679,1.5558,1.3407,1.4071,1.6312,1.6217,1.4032,1.3589,1.5589,1.6504,1.4799,1.3502,1.4827,1.64,1.5508,1.3777,1.4214,1.5983,1.5995,1.4299,1.3874,1.5399,1.6176,1.4904,1.385,1.4812,1.6054,1.5437,1.4098,1.4364,1.5706,1.5779,1.4516,1.414,1.5252,1.5879,1.4973,1.4158,1.4821,1.5756,1.5353,1.4369,1.4513,1.548,1.5576,1.4686,1.438,1.5146,1.5619,1.5012,1.442,1.4849,1.5508,1.5264,1.4588,1.4654,1.5302,1.5395,1.4814,1.4587,1.5074,1.5401,1.5027,1.4636,1.4888,1.5309,1.5177,1.4758,1.478,1.517,1.5242,1.4903,1.4757,1.5031,1.5227,1.5026,1.4801,1.493,1.5162,1.5101,1.488,1.4883,1.5079,1.5122,1.4959,1.4884,1.5009,1.5102,1.5016,1.4917,1.4967,1.5063,1.5042,1.4957,1.4956,1.5025,1.5041,1.4989,1.4966,1.5001,1.5026,1.5005,1.4982,1.4993,1.5011,1.5007,1.4995,1.4995,1.5002,1.5003,1.5,1.4999,1.5,1.5,1.5,1.5,1.4999,1.5002,1.5002,1.4997,1.4994,1.5004,1.5011,1.4998,1.4983,1.4999,1.5024,1.5009,1.4971,1.498,1.5032,1.5034,1.497,1.4949,1.5023,1.5068,1.499,1.4916,1.4989,1.5095,1.5039,1.49,1.4929,1.5096,1.5107,1.4919,1.4857,1.5054,1.5175,1.4986,1.4801,1.4964,1.5212,1.5096,1.4791,1.484,1.5188,1.5225,1.4852,1.4716,1.5087,1.5332,1.4991,1.4638,1.4916,1.537,1.5187,1.4649,1.4709,1.5302,1.5391,1.4777,1.4524,1.5116,1.5538,1.5014,1.443,1.4839,1.5565,1.5316,1.4481,1.4531,1.543,1.5606,1.47,1.4282,1.5133,1.5792,1.5061,1.4181,1.4726,1.5792,1.549,1.4293,1.4305,1.5565,1.5873,1.463,1.3991,1.5131,1.6089,1.514,1.3897,1.4573,1.6043,1.5711,1.4092,1.4028,1.57,1.619,1.4574,1.3653,1.5102,1.6426,1.5256,1.3583,1.4375,1.6313,1.5981,1.3886,1.37,1.5825,1.6556,1.4539,1.3272,1.504,1.6799,1.5414,1.3244,1.4128,1.6594,1.6304,1.3683,1.3321,1.5935,1.6969,1.4533,1.2851,1.4939,1.72,1.5619,1.2889,1.383,1.6878,1.6679,1.3491,1.2892,1.6021,1.7426,1.4562,1.2396,1.4793,1.7624,1.5874,1.2525,1.3478,1.7157,1.7106,1.3317,1.2415,1.6075,1.7922,1.4633,1.1912,1.4598,1.8063,1.6183,1.216,1.3073,1.7423,1.7583,1.3169,1.1896,1.6092,1.8451,1.4751,1.1408,1.4351,1.851,1.6546,1.1801,1.2615,1.7669,1.8108,1.3055,1.1337,1.6065,1.9008,1.492,1.0889,1.4049,1.8956,1.6965,1.1458,1.2106,1.7886,1.8676,1.2981,1.0745,1.5989,1.9585,1.5143,1.0364,1.369,1.9394,1.7437,1.1137,1.1548,1.8067,1.9284,1.2954,1.0126,1.586,2.0175,1.5424,0.98414,1.3274,1.9814,1.7963,1.0848,1.0946,1.8204,1.9925,1.2978,0.94874,1.5672,2.077,1.5764,0.93293,1.2802,2.0209,1.8538,1.0597,1.0304,1.8293,2.0593,1.3059,0.88364,1.5425,2.1362,1.6163,0.88365,1.2276,2.057,1.9159,1.0392,0.96278,1.8327,2.1281,1.32,0.81814,1.5117,2.1941,1.662,0.83712,1.1698,2.089,1.982,1.0239,0.89245,1.8301,2.198,1.3404,0.75311,1.4746,2.2499,1.7134,0.79416,1.1073,2.1162,2.0517,1.0144,0.82012,1.8212,2.2683,1.3672,0.68942,1.4315,2.3028,1.7702,0.75557,1.0405,2.1379,2.1242,1.0111,0.7466,1.8058,2.3381,1.4005,0.62794,1.3824,2.352,1.8319,0.72207,0.97012,2.1535,2.1988,1.0145,0.67273,1.7836,2.4065,1.4402,0.56956,1.3278,2.3965,1.898,0.69432,0.89675,2.1626,2.2746,1.0248,0.59939,1.7546,2.4725,1.4862,0.51512,1.2679,2.4357,1.968,0.67292,0.82117,2.1647,2.3508,1.0421,0.52749,1.7188,2.5354,1.538,0.46543,1.2033,2.469,2.0412,0.65835,0.7442,2.1596,2.4266,1.0666,0.45793,1.6766,2.5942,1.5953,0.42125,1.1346,2.4956,2.1168,0.65102,0.66671,2.1471,2.5009,1.0981,0.39162,1.628,2.6481,1.6577,0.38326,1.0624,2.5151,2.1939,0.65123,0.58959,2.1272,2.5729,1.1365,0.32941,1.5737,2.6964,1.7245,0.35207,0.98769,2.5272,2.2718,0.65915,0.51378,2.0998,2.6417,1.1815,0.27215,1.514,2.7384,1.7949,0.32821,0.91112,2.5314,2.3494,0.67487,0.44018,2.0652,2.7064,1.2327,0.22062,1.4495,2.7733,1.8683,0.31209,0.83361,2.5276,2.4259,0.69833,0.36973,2.0236,2.7662,1.2896,0.17552,1.3811,2.8008,1.9438,0.30404,0.75608,2.5157,2.5004,0.72936,0.30331,1.9755,2.8202,1.3516,0.13749,1.3093,2.8204,2.0205,0.30426,0.67945,2.4957,2.5718,0.7677,0.24177,1.9214,2.8677,1.418,0.10707,1.2352,2.8317,2.0976,0.31283,0.60467,2.4679,2.6394,0.81293,0.18592,1.8618,2.9082,1.488,0.084701,1.1594,2.8345,2.174,0.32972,0.53266,2.4325,2.7022,0.86458,0.13648,1.7974,2.941,1.5608,0.070718,1.0831,2.8287,2.2488,0.35478,0.46434,2.3898,2.7594,0.92203,0.094096,1.729,2.9657,1.6355,0.065343,1.007,2.8145,2.3211,0.38775,0.40057,2.3403,2.8104,0.98462,0.059337,1.6575,2.9819,1.7112,0.068682,0.9322,2.7918,2.3901,0.42825,0.34216,2.2847,2.8544,1.0516,0.032662,1.5836,2.9895,1.787,0.080721,0.85957,2.761,2.4547,0.47579,0.28985,2.2237,2.8909,1.1221,0.014423,1.5084,2.9883,1.8619,0.10133,0.79005,2.7224,2.5142,0.52979,0.24431,2.1579,2.9194,1.1952,0.0048601,1.4328,2.9782,1.9349,0.13025,0.7245,2.6765,2.5679,0.58958,0.20612,2.0882,2.9395,1.2701,0.0040963,1.3577,2.9596,2.0052,0.16713,0.66375,2.6238,2.615,0.6544,0.17575,2.0155,2.9511,1.3458,0.012135,1.2841,2.9324,2.0718,0.21149,0.60857,2.5652,2.655,0.72344,0.15358,1.9407,2.9539,1.4214,0.028861,1.2128,2.8973,2.134,0.26277,0.55961,2.5012,2.6875,0.79582,0.13986,1.8647,2.948,1.4959,0.054042,1.1448,2.8545,2.191,0.3203,0.51748,2.4328,2.7119,0.87064,0.13472,1.7886,2.9335,1.5683,0.087332,1.0809,2.8047,2.2421,0.38335,0.48266,2.3607,2.7281,0.94695,0.1382,1.7131,2.9105,1.6379,0.12828,1.0218,2.7485,2.2866,0.4511,0.45554,2.2859,2.736,1.0238,0.15019,1.6393,2.8794,1.7038,0.17632,0.96832,2.6866,2.3242,0.52271,0.43639,2.2093,2.7354,1.1003,0.17048,1.568,2.8408,1.7651,0.23083,0.92096,2.6199,2.3544,0.59726,0.42537,2.1319,2.7265,1.1755,0.19875,1.5,2.795,1.8213,0.29107,0.88024,2.5491,2.377,0.67383,0.42251,2.0545,2.7095,1.2485,0.23455,1.4362,2.7428,1.8718,0.35626,0.84656,2.4752,2.3917,0.75149,0.42774,1.9782,2.6846,1.3184,0.27735,1.3772,2.6848,1.9159,0.42555,0.8202,2.3992,2.3985,0.82931,0.44086,1.9038,2.6524,1.3846,0.32653,1.3236,2.6219,1.9533,0.49805,0.80135,2.3219,2.3976,0.90637,0.46156,1.832,2.6133,1.4463,0.3814,1.276,2.5549,1.9838,0.57286,0.79004,2.2442,2.389,0.98181,0.48943,1.7638,2.568,1.503,0.44116,1.2347,2.4846,2.0071,0.64906,0.78623,2.1671,2.3731,1.0548,0.52396,1.6997,2.5172,1.554,0.50502,1.2,2.412,2.0232,0.72572,0.78973,2.0914,2.3503,1.1246,0.56455,1.6403,2.4615,1.599,0.57209,1.1722,2.3379,2.0321,0.80197,0.80025,2.018,2.3211,1.1904,0.61051,1.5863,2.4019,1.6378,0.6415,1.1512,2.2633,2.0341,0.87692,0.8174,1.9475,2.286,1.2518,0.6611,1.538,2.3391,1.67,0.71233,1.137,2.189,2.0293,0.94978,0.8407,1.8808,2.2458,1.3081,0.71552,1.4956,2.274,1.6957,0.78371,1.1295,2.1159,2.0182,1.0198,0.86957,1.8183,2.2012,1.359,0.77294,1.4595,2.2076,1.7149,0.85475,1.1285,2.0449,2.0012,1.0863,0.90334,1.7607,2.1529,1.4042,0.83249,1.4296,2.1407,1.7277,0.92462,1.1334,1.9766,1.979,1.1487,0.94131,1.7082,2.1018,1.4435,0.89331,1.4059,2.0742,1.7344,0.99252,1.1439,1.9117,1.9521,1.2064,0.9827,1.6612,2.0487,1.4768,0.95451,1.3882,2.0089,1.7354,1.0577,1.1595,1.8508,1.9212,1.2592,1.0267,1.6199,1.9946,1.5041,1.0153,1.3764,1.9455,1.7311,1.1196,1.1794,1.7943,1.8872,1.3066,1.0725,1.5844,1.9401,1.5257,1.0748,1.3701,1.8849,1.7221,1.1775,1.2029,1.7428,1.8508,1.3486,1.1192,1.5545,1.8862,1.5417,1.1322,1.3687,1.8275,1.709,1.2311,1.2294,1.6964,1.8128,1.385,1.166,1.5303,1.8337,1.5525,1.187,1.3718,1.7741,1.6925,1.2798,1.2581,1.6553,1.7741,1.4159,1.2121,1.5113,1.7833,1.5586,1.2384,1.3787,1.725,1.6733,1.3236,1.2881,1.6197,1.7354,1.4414,1.2567,1.4973,1.7357,1.5604,1.2859,1.3889,1.6806,1.6521,1.3621,1.3187,1.5893,1.6977,1.4618,1.2992,1.4878,1.6915,1.5587,1.3291,1.4014,1.6412,1.6298,1.3953,1.349,1.5642,1.6615,1.4775,1.3387,1.4823,1.6512,1.554,1.3675,1.4157,1.6069,1.6072,1.4233,1.3782,1.544,1.6277,1.4889,1.3748,1.4801,1.6152,1.5471,1.4011,1.4308,1.5778,1.5851,1.4463,1.4057,1.5283,1.5969,1.4965,1.4068,1.4807,1.584,1.5387,1.4296,1.4461,1.5538,1.5641,1.4645,1.4307,1.5168,1.5696,1.501,1.4345,1.4833,1.5576,1.5296,1.4529,1.4608,1.5347,1.5451,1.4783,1.4526,1.5088,1.5464,1.5029,1.4575,1.4871,1.5363,1.5206,1.4713,1.4741,1.5203,1.5287,1.4882,1.4708,1.5039,1.5276,1.503,1.4756,1.4915,1.5201,1.5124,1.4848,1.4853,1.5101,1.5155,1.4947,1.485,1.5012,1.5135,1.5021,1.4887,1.4956,1.5088,1.5058,1.4939,1.4937,1.5037,1.5061,1.4983,1.4946,1.5002,1.5044,1.5008,1.4968,1.4986,1.5022,1.5015,1.4987,1.4987,1.5006,1.5009,1.4998,1.4994,1.5,1.5003,1.5,1.4999,1.5,1.5,1.5,1.5,1.4999,1.5001,1.5003,1.4999,1.4993,1.4999,1.5011,1.5004,1.4985,1.4989,1.5019,1.502,1.4981,1.4968,1.5015,1.5045,1.4993,1.4942,1.4993,1.5068,1.5028,1.4926,1.4948,1.5072,1.5081,1.4938,1.489,1.5043,1.5137,1.4988,1.4842,1.4972,1.5171,1.5077,1.4829,1.487,1.5156,1.5185,1.4876,1.4764,1.5075,1.5279,1.4991,1.4693,1.493,1.5316,1.5158,1.4698,1.4751,1.5262,1.5337,1.4804,1.4587,1.5104,1.547,1.501,1.4499,1.4861,1.5499,1.5277,1.4539,1.4587,1.5385,1.5538,1.4729,1.436,1.5123,1.5709,1.5051,1.4263,1.4758,1.5716,1.5438,1.4358,1.4374,1.5516,1.579,1.4659,1.4084,1.5125,1.5993,1.5122,1.3991,1.4615,1.5958,1.5646,1.4162,1.4112,1.5649,1.6092,1.4601,1.376,1.5101,1.6318,1.5229,1.3686,1.4428,1.6221,1.5904,1.396,1.3798,1.5775,1.6444,1.4562,1.3391,1.5046,1.6679,1.5377,1.3356,1.4194,1.6497,1.6213,1.3759,1.3432,1.5886,1.6844,1.4551,1.2982,1.4954,1.7071,1.5571,1.3008,1.3908,1.6778,1.6574,1.3566,1.3017,1.5976,1.7288,1.4573,1.2538,1.4818,1.7487,1.5814,1.2649,1.357,1.7055,1.6987,1.339,1.2553,1.6036,1.7773,1.4635,1.2063,1.4634,1.792,1.6111,1.2286,1.3178,1.7322,1.7451,1.3238,1.2046,1.606,1.8292,1.4743,1.1566,1.4399,1.8362,1.6461,1.1929,1.2733,1.757,1.7964,1.3118,1.1498,1.6042,1.884,1.4901,1.1053,1.4109,1.8806,1.6866,1.1584,1.2237,1.7791,1.8521,1.3037,1.0916,1.5976,1.941,1.5113,1.0532,1.3763,1.9243,1.7326,1.1261,1.1691,1.7978,1.9118,1.3001,1.0305,1.5857,1.9995,1.5381,1.0011,1.336,1.9665,1.7839,1.0967,1.11,1.8124,1.975,1.3015,0.96719,1.5682,2.0587,1.5708,0.94989,1.2901,2.0063,1.8403,1.0709,1.0468,1.8222,2.0411,1.3085,0.90253,1.5447,2.1178,1.6094,0.90037,1.2386,2.043,1.9013,1.0496,0.98,1.8266,2.1093,1.3213,0.83728,1.5151,2.1758,1.6539,0.85341,1.182,2.0758,1.9665,1.0333,0.91035,1.8253,2.1789,1.3405,0.77228,1.4794,2.2319,1.7041,0.80983,1.1205,2.1039,2.0354,1.0226,0.83854,1.8176,2.249,1.366,0.70842,1.4375,2.2854,1.7597,0.77042,1.0547,2.1266,2.1072,1.0181,0.76534,1.8035,2.3188,1.3979,0.64656,1.3897,2.3352,1.8204,0.73592,0.98508,2.1434,2.1813,1.0202,0.69159,1.7827,2.3874,1.4363,0.58759,1.3362,2.3806,1.8856,0.70703,0.91234,2.1538,2.2568,1.029,0.61817,1.7551,2.4539,1.481,0.53237,1.2774,2.4209,1.9548,0.68433,0.83723,2.1574,2.333,1.0449,0.54598,1.7207,2.5175,1.5316,0.4817,1.2137,2.4554,2.0274,0.66836,0.76053,2.1538,2.4088,1.0679,0.47592,1.6798,2.5771,1.5878,0.43636,1.1459,2.4834,2.1025,0.65953,0.68311,2.1428,2.4835,1.098,0.4089,1.6325,2.6321,1.6492,0.39706,1.0744,2.5045,2.1793,0.65816,0.60586,2.1244,2.5561,1.135,0.34578,1.5793,2.6816,1.7151,0.36442,1.0001,2.5181,2.2571,0.66447,0.5297,2.0986,2.6256,1.1787,0.28743,1.5207,2.7249,1.7848,0.33898,0.92388,2.5239,2.3348,0.67855,0.45555,2.0655,2.6912,1.2286,0.23462,1.4572,2.7614,1.8577,0.32119,0.84648,2.5219,2.4117,0.70038,0.38434,2.0253,2.7521,1.2844,0.18808,1.3895,2.7906,1.9328,0.3114,0.76886,2.5117,2.4867,0.72982,0.31697,1.9786,2.8074,1.3453,0.14847,1.3184,2.8118,2.0094,0.30982,0.69193,2.4935,2.5589,0.76661,0.25429,1.9257,2.8565,1.4108,0.11635,1.2447,2.825,2.0864,0.31658,0.61664,2.4673,2.6274,0.8104,0.19711,1.8672,2.8985,1.4801,0.092185,1.1692,2.8296,2.1631,0.33166,0.54392,2.4335,2.6913,0.86071,0.14619,1.8038,2.9331,1.5524,0.076334,1.0928,2.8258,2.2384,0.35496,0.47469,2.3923,2.7499,0.91696,0.10219,1.7362,2.9596,1.6268,0.069046,1.0166,2.8134,2.3114,0.38622,0.40983,2.3443,2.8023,0.9785,0.06569,1.6652,2.9777,1.7024,0.070453,0.94141,2.7925,2.3811,0.4251,0.35014,2.29,2.8479,1.0446,0.03718,1.5918,2.9872,1.7783,0.080569,0.8682,2.7635,2.4468,0.47113,0.29641,2.2301,2.8861,1.1144,0.017037,1.5168,2.988,1.8534,0.099288,0.7979,2.7266,2.5075,0.52375,0.24931,2.1653,2.9165,1.187,0.0055261,1.4412,2.9799,1.9269,0.12639,0.7314,2.6822,2.5626,0.58231,0.20944,2.0964,2.9385,1.2616,0.0027977,1.3659,2.9631,1.9979,0.16153,0.66952,2.6311,2.6112,0.64608,0.17729,2.0243,2.952,1.3372,0.0088828,1.2919,2.9379,2.0654,0.20427,0.61304,2.5737,2.6528,0.71424,0.15328,1.9499,2.9567,1.4129,0.023693,1.22,2.9045,2.1287,0.25405,0.56266,2.5109,2.687,0.78594,0.13767,1.8741,2.9528,1.4876,0.047023,1.1512,2.8633,2.1868,0.31025,0.51899,2.4433,2.7132,0.86028,0.13064,1.7979,2.9401,1.5606,0.078551,1.0864,2.815,2.2393,0.37213,0.48254,2.372,2.7313,0.93632,0.13223,1.7223,2.919,1.6309,0.11785,1.0262,2.7602,2.2853,0.4389,0.45372,2.2978,2.7409,1.0131,0.14237,1.648,2.8897,1.6976,0.16438,0.97148,2.6995,2.3244,0.50972,0.43283,2.2215,2.7422,1.0897,0.16088,1.5762,2.8526,1.76,0.21753,0.92276,2.6337,2.3562,0.58369,0.42005,2.1442,2.7351,1.1652,0.18746,1.5075,2.8083,1.8173,0.27659,0.88059,2.5638,2.3804,0.65988,0.41545,2.0668,2.7197,1.2387,0.22168,1.4427,2.7574,1.869,0.34078,0.84539,2.4905,2.3968,0.73738,0.41898,1.9902,2.6965,1.3094,0.26305,1.3827,2.7006,1.9145,0.40927,0.81747,2.4149,2.4053,0.81523,0.43046,1.9153,2.6658,1.3765,0.31095,1.3279,2.6387,1.9533,0.48118,0.79704,2.3377,2.4059,0.89253,0.44962,1.8429,2.6281,1.4392,0.3647,1.279,2.5724,1.9853,0.55561,0.78418,2.26,2.3989,0.9684,0.47606,1.7738,2.584,1.4969,0.42355,1.2363,2.5027,2.0101,0.63163,0.77884,2.1827,2.3845,1.042,0.50929,1.7088,2.5342,1.5492,0.48668,1.2002,2.4304,2.0276,0.70833,0.78087,2.1066,2.363,1.1125,0.54874,1.6484,2.4794,1.5955,0.55324,1.171,2.3565,2.038,0.78481,0.79002,2.0326,2.335,1.1793,0.59373,1.5932,2.4204,1.6355,0.62234,1.1486,2.2818,2.0413,0.86019,0.80592,1.9614,2.301,1.2417,0.64354,1.5437,2.3581,1.6691,0.69308,1.1331,2.2073,2.0378,0.93365,0.82809,1.8938,2.2617,1.2991,0.69738,1.5,2.2933,1.6962,0.76457,1.1243,2.1338,2.0279,1.0044,0.85598,1.8303,2.2178,1.3513,0.75442,1.4626,2.2269,1.7166,0.83592,1.122,2.0621,2.012,1.0718,0.88895,1.7715,2.17,1.3977,0.8138,1.4314,2.1599,1.7307,0.90629,1.1258,1.993,1.9906,1.1352,0.92629,1.7178,2.1192,1.4383,0.87465,1.4064,2.093,1.7386,0.97487,1.1354,1.9271,1.9645,1.1941,0.96725,1.6696,2.0662,1.4728,0.93609,1.3876,2.0271,1.7406,1.0409,1.1501,1.8651,1.9342,1.2481,1.011,1.627,2.0119,1.5014,0.99728,1.3746,1.963,1.7373,1.1038,1.1693,1.8076,1.9005,1.2968,1.0568,1.5902,1.9572,1.5241,1.0574,1.3673,1.9014,1.7291,1.1628,1.1924,1.7548,1.8643,1.34,1.1037,1.5591,1.9028,1.5413,1.1157,1.365,1.843,1.7166,1.2176,1.2186,1.7071,1.8263,1.3777,1.1509,1.5337,1.8496,1.5531,1.1714,1.3673,1.7884,1.7005,1.2676,1.2471,1.6647,1.7873,1.4099,1.1975,1.5136,1.7983,1.56,1.2239,1.3737,1.7381,1.6815,1.3127,1.2772,1.6277,1.7482,1.4366,1.2429,1.4986,1.7497,1.5626,1.2726,1.3834,1.6924,1.6605,1.3525,1.308,1.5961,1.7098,1.4582,1.2862,1.4882,1.7043,1.5615,1.3171,1.3957,1.6516,1.6381,1.3871,1.3388,1.5697,1.6729,1.4749,1.3268,1.4819,1.6628,1.5572,1.357,1.4099,1.6159,1.6152,1.4165,1.3687,1.5484,1.6381,1.4872,1.3641,1.4792,1.6255,1.5506,1.3919,1.4252,1.5854,1.5925,1.4407,1.397,1.5316,1.6062,1.4956,1.3975,1.4793,1.5928,1.5423,1.4218,1.4408,1.56,1.5709,1.4601,1.423,1.5192,1.5777,1.5006,1.4266,1.4816,1.565,1.5331,1.4467,1.4559,1.5396,1.551,1.4751,1.446,1.5104,1.5531,1.503,1.4511,1.4854,1.5422,1.5237,1.4664,1.4699,1.5239,1.5336,1.4859,1.4656,1.5048,1.5329,1.5034,1.4707,1.4899,1.5244,1.515,1.4813,1.4819,1.5126,1.5193,1.4932,1.481,1.5016,1.5173,1.5026,1.4852,1.4943,1.5117,1.5077,1.4916,1.4913,1.5052,1.5086,1.4975,1.4921,1.5003,1.5067,1.5013,1.4948,1.4978,1.5037,1.5025,1.4977,1.4975,1.5012,1.5021,1.4996,1.4985,1.5,1.501,1.5002,1.4995,1.4998,1.5002,1.5001,1.5,1.5,1.5,1.5,1.5,1.4999,1.5,1.5003,1.5002,1.4994,1.4995,1.5009,1.501,1.499,1.4982,1.5009,1.5027,1.4996,1.4963,1.4995,1.5045,1.5018,1.4949,1.4963,1.5052,1.5058,1.4954,1.4919,1.5032,1.5104,1.499,1.4878,1.4979,1.5134,1.506,1.4864,1.4897,1.5126,1.5149,1.4898,1.4807,1.5063,1.523,1.4991,1.4744,1.4943,1.5266,1.5132,1.4743,1.479,1.5225,1.5287,1.483,1.4645,1.5092,1.5406,1.5006,1.4564,1.4881,1.5438,1.524,1.4593,1.4639,1.5342,1.5473,1.4757,1.4433,1.5113,1.5631,1.5042,1.4341,1.4787,1.5643,1.539,1.442,1.444,1.5469,1.5711,1.4687,1.4172,1.5118,1.5901,1.5106,1.408,1.4655,1.5877,1.5585,1.4231,1.4191,1.5599,1.5999,1.4627,1.3862,1.51,1.6213,1.5204,1.3786,1.4479,1.6132,1.583,1.4032,1.3891,1.5725,1.6337,1.4585,1.3507,1.5052,1.6563,1.5342,1.3466,1.4257,1.6402,1.6125,1.3833,1.354,1.5838,1.6723,1.4569,1.311,1.4968,1.6945,1.5525,1.3124,1.3984,1.6679,1.6473,1.364,1.3138,1.5931,1.7154,1.4584,1.2676,1.4841,1.7352,1.5757,1.2771,1.3659,1.6955,1.6872,1.3463,1.2688,1.5997,1.7627,1.4638,1.2212,1.4668,1.7778,1.6041,1.2411,1.328,1.7222,1.7323,1.3307,1.2193,1.6028,1.8135,1.4737,1.1722,1.4445,1.8216,1.6378,1.2055,1.2849,1.7472,1.7823,1.3182,1.1656,1.6018,1.8674,1.4884,1.1216,1.4167,1.8657,1.677,1.171,1.2365,1.7697,1.8368,1.3094,1.1084,1.5961,1.9238,1.5084,1.0699,1.3833,1.9093,1.7218,1.1384,1.1831,1.789,1.8955,1.3049,1.0481,1.5853,1.9817,1.5341,1.018,1.3443,1.9516,1.7718,1.1086,1.1251,1.8043,1.9578,1.3053,0.9855,1.5689,2.0405,1.5655,0.96681,1.2997,1.9918,1.827,1.0822,1.0629,1.815,2.0231,1.3112,0.92132,1.5467,2.0994,1.6028,0.91711,1.2495,2.029,1.8869,1.0601,0.99705,1.8204,2.0907,1.3229,0.85636,1.5184,2.1575,1.6461,0.86976,1.194,2.0624,1.9512,1.0428,0.92813,1.8202,2.1598,1.3407,0.79145,1.484,2.2139,1.695,0.82559,1.1336,2.0914,2.0192,1.0311,0.85687,1.8138,2.2297,1.3649,0.72746,1.4434,2.2678,1.7495,0.78541,1.0687,2.1152,2.0903,1.0253,0.78405,1.801,2.2995,1.3956,0.66527,1.3968,2.3183,1.8091,0.74997,0.99993,2.1332,2.1639,1.026,0.71047,1.7815,2.3683,1.4326,0.60577,1.3445,2.3646,1.8733,0.71996,0.92787,2.1448,2.2391,1.0335,0.63702,1.7553,2.4352,1.476,0.5498,1.2867,2.4059,1.9417,0.69601,0.85325,2.1498,2.3151,1.048,0.56459,1.7223,2.4993,1.5254,0.49821,1.2241,2.4416,2.0136,0.67866,0.77687,2.1476,2.391,1.0695,0.49408,1.6827,2.5598,1.5805,0.45176,1.157,2.4709,2.0882,0.66835,0.69957,2.1382,2.4659,1.0982,0.42639,1.6368,2.6158,1.6408,0.41118,1.0863,2.4934,2.1647,0.66543,0.62224,2.1213,2.539,1.1337,0.36242,1.5848,2.6665,1.7058,0.37712,1.0126,2.5086,2.2423,0.67013,0.54579,2.097,2.6092,1.176,0.30301,1.5273,2.7111,1.7748,0.35013,0.93667,2.5161,2.3202,0.68257,0.47114,2.0654,2.6758,1.2247,0.24897,1.4647,2.7491,1.847,0.3307,0.85942,2.5157,2.3973,0.70277,0.39922,2.0268,2.7377,1.2793,0.20103,1.3979,2.7799,1.9218,0.31917,0.78175,2.5073,2.4728,0.73061,0.33093,1.9814,2.7943,1.3392,0.15988,1.3274,2.8029,1.9981,0.31582,0.70457,2.4908,2.5457,0.76587,0.26715,1.9297,2.8448,1.4038,0.12608,1.2541,2.8178,2.0752,0.32077,0.62882,2.4663,2.6151,0.80819,0.20869,1.8724,2.8884,1.4724,0.10014,1.1789,2.8243,2.1521,0.33405,0.55544,2.4341,2.6801,0.85714,0.15632,1.8099,2.9247,1.5441,0.082441,1.1027,2.8223,2.2278,0.35557,0.48534,2.3945,2.7399,0.91216,0.11073,1.7432,2.953,1.6181,0.073249,1.0263,2.8118,2.3014,0.38511,0.41942,2.348,2.7938,0.97261,0.072522,1.6729,2.973,1.6936,0.072728,0.95077,2.7928,2.3719,0.42235,0.3585,2.295,2.841,1.0378,0.042197,1.5999,2.9845,1.7695,0.080918,0.87702,2.7655,2.4386,0.46684,0.30337,2.2363,2.8809,1.1068,0.020163,1.5252,2.9872,1.8449,0.097741,0.80599,2.7303,2.5005,0.51806,0.25473,2.1725,2.913,1.1789,0.0067119,1.4496,2.981,1.9188,0.123,0.73856,2.6876,2.5569,0.57536,0.2132,2.1044,2.9369,1.2531,0.0020199,1.3742,2.9662,1.9905,0.15638,0.67559,2.6379,2.607,0.63803,0.17931,2.033,2.9523,1.3286,0.0061459,1.2998,2.9428,2.0588,0.19747,0.61785,2.5819,2.6502,0.70528,0.15346,1.959,2.959,1.4043,0.019029,1.2274,2.9112,2.1231,0.24573,0.56607,2.5202,2.6861,0.77626,0.13597,1.8835,2.957,1.4793,0.040489,1.1579,2.8717,2.1824,0.30055,0.52088,2.4537,2.7141,0.85007,0.12704,1.8073,2.9462,1.5528,0.070232,1.0921,2.825,2.2361,0.36123,0.48281,2.3831,2.7339,0.92579,0.12674,1.7315,2.927,1.6237,0.10785,1.0309,2.7715,2.2836,0.42698,0.4523,2.3095,2.7454,1.0025,0.13502,1.6569,2.8994,1.6912,0.15284,0.97491,2.7121,2.3242,0.49696,0.42968,2.2336,2.7485,1.0792,0.15173,1.5844,2.864,1.7546,0.2046,0.92485,2.6474,2.3576,0.5703,0.41514,2.1565,2.7432,1.155,0.17658,1.515,2.8213,1.813,0.26243,0.88124,2.5783,2.3835,0.64608,0.40879,2.079,2.7296,1.229,0.2092,1.4494,2.7717,1.8659,0.32558,0.84454,2.5057,2.4015,0.72336,0.4106,2.0022,2.7081,1.3003,0.2491,1.3883,2.7161,1.9128,0.39322,0.81507,2.4304,2.4117,0.8012,0.42043,1.9268,2.6789,1.3682,0.29568,1.3324,2.6552,1.9531,0.46449,0.79306,2.3535,2.414,0.8787,0.43801,1.8539,2.6426,1.4318,0.34828,1.2822,2.5898,1.9865,0.53848,0.77862,2.2759,2.4085,0.95495,0.46299,1.784,2.5998,1.4907,0.40616,1.2382,2.5206,2.0127,0.61428,0.77174,2.1983,2.3956,1.0291,0.49489,1.7181,2.551,1.5441,0.46852,1.2007,2.4488,2.0318,0.69097,0.7723,2.1219,2.3755,1.1004,0.53316,1.6567,2.4971,1.5917,0.53451,1.17,2.375,2.0436,0.76763,0.78005,2.0473,2.3487,1.168,0.57714,1.6003,2.4388,1.6331,0.60325,1.1463,2.3003,2.0483,0.84339,0.79465,1.9754,2.3158,1.2314,0.62612,1.5495,2.377,1.668,0.67385,1.1294,2.2256,2.0462,0.91742,0.81566,1.9069,2.2774,1.29,0.67933,1.5047,2.3125,1.6964,0.74539,1.1193,2.1517,2.0374,0.98892,0.84254,1.8424,2.2342,1.3433,0.73594,1.4659,2.2462,1.7182,0.81701,1.1157,2.0794,2.0226,1.0572,0.87466,1.7825,2.187,1.391,0.79509,1.4334,2.179,1.7335,0.88784,1.1184,2.0095,2.0022,1.1216,0.91133,1.7277,2.1366,1.4328,0.85592,1.4072,2.1118,1.7426,0.95706,1.1269,1.9428,1.9768,1.1816,0.95181,1.6782,2.0838,1.4686,0.91756,1.3871,2.0454,1.7457,1.0239,1.1407,1.8798,1.9471,1.2368,0.9953,1.6344,2.0294,1.4985,0.97914,1.373,1.9806,1.7433,1.0877,1.1593,1.821,1.9139,1.2867,1.041,1.5963,1.9744,1.5224,1.0398,1.3646,1.9182,1.7359,1.1478,1.1818,1.767,1.8778,1.3313,1.088,1.5639,1.9196,1.5407,1.0989,1.3614,1.8588,1.7241,1.2038,1.2076,1.718,1.8399,1.3702,1.1355,1.5373,1.8657,1.5535,1.1555,1.3629,1.8031,1.7085,1.2551,1.236,1.6744,1.8007,1.4037,1.1827,1.5161,1.8137,1.5614,1.2091,1.3686,1.7515,1.6899,1.3015,1.2662,1.6361,1.7613,1.4316,1.2288,1.5,1.764,1.5648,1.259,1.3778,1.7045,1.6689,1.3427,1.2972,1.6031,1.7223,1.4543,1.273,1.4887,1.7175,1.5643,1.3047,1.3899,1.6623,1.6465,1.3786,1.3284,1.5755,1.6846,1.4721,1.3146,1.4816,1.6747,1.5605,1.346,1.4039,1.6252,1.6233,1.4093,1.3589,1.553,1.6489,1.4853,1.353,1.4783,1.6361,1.5541,1.3824,1.4193,1.5933,1.6002,1.4349,1.388,1.5352,1.6159,1.4945,1.3877,1.4779,1.602,1.5459,1.4137,1.4352,1.5666,1.5779,1.4555,1.415,1.5217,1.5862,1.5002,1.4182,1.48,1.5727,1.5366,1.44,1.4509,1.5448,1.5573,1.4715,1.4391,1.5121,1.5603,1.5031,1.4441,1.4836,1.5484,1.527,1.4612,1.4654,1.5279,1.5389,1.4834,1.4598,1.5058,1.5386,1.5038,1.4652,1.4882,1.5292,1.5179,1.4775,1.4783,1.5154,1.5235,1.4915,1.4767,1.5022,1.5216,1.5031,1.4813,1.4928,1.515,1.5099,1.489,1.4887,1.507,1.5116,1.4966,1.4892,1.5005,1.5094,1.5018,1.4924,1.4968,1.5056,1.5039,1.4963,1.496,1.5021,1.5037,1.4992,1.497,1.5,1.5022,1.5005,1.4986,1.4994,1.5008,1.5005,1.4996,1.4997,1.5001,1.5001,1.5,1.5,1.5,1.5,1.5,1.4999,1.4999,1.5003,1.5004,1.4996,1.4992,1.5004,1.5014,1.4998,1.498,1.4997,1.5027,1.5011,1.4967,1.4976,1.5035,1.5039,1.4968,1.4943,1.5023,1.5075,1.4992,1.4909,1.4985,1.5102,1.5045,1.4895,1.492,1.5099,1.5117,1.4918,1.4846,1.5051,1.5186,1.4992,1.479,1.4954,1.522,1.5108,1.4785,1.4825,1.519,1.5241,1.4855,1.4699,1.508,1.5347,1.5003,1.4625,1.49,1.5379,1.5206,1.4645,1.4687,1.5301,1.5413,1.4784,1.4502,1.5102,1.5557,1.5034,1.4415,1.4814,1.5574,1.5345,1.448,1.4501,1.5424,1.5636,1.4715,1.4255,1.5111,1.5814,1.5091,1.4166,1.4691,1.5798,1.5528,1.4296,1.4267,1.5551,1.5909,1.4654,1.396,1.5098,1.6113,1.5181,1.3883,1.4527,1.6045,1.5759,1.4103,1.3981,1.5676,1.6233,1.4609,1.3618,1.5056,1.6451,1.531,1.3572,1.4317,1.6309,1.6041,1.3906,1.3644,1.5791,1.6605,1.4588,1.3234,1.498,1.6822,1.5482,1.3238,1.4056,1.6582,1.6375,1.3714,1.3256,1.5886,1.7023,1.4597,1.2812,1.4863,1.7221,1.5702,1.289,1.3745,1.6855,1.676,1.3535,1.2819,1.5957,1.7484,1.4643,1.2357,1.47,1.764,1.5973,1.2535,1.3379,1.7122,1.7198,1.3377,1.2336,1.5994,1.7982,1.4732,1.1876,1.4488,1.8072,1.6298,1.218,1.2961,1.7374,1.7685,1.3246,1.1811,1.5992,1.8512,1.4869,1.1376,1.4223,1.8509,1.6677,1.1835,1.249,1.7602,1.8218,1.3151,1.1249,1.5945,1.9067,1.5058,1.0864,1.3902,1.8944,1.7111,1.1507,1.1969,1.78,1.8794,1.3098,1.0655,1.5847,1.9641,1.5302,1.0348,1.3524,1.9368,1.7599,1.1205,1.1401,1.796,1.9407,1.3093,1.0036,1.5695,2.0225,1.5604,0.98367,1.309,1.9772,1.8139,1.0935,1.0789,1.8076,2.0052,1.3141,0.93999,1.5485,2.0812,1.5965,0.93383,1.2601,2.0149,1.8727,1.0706,1.0139,1.8141,2.0721,1.3246,0.87536,1.5215,2.1392,1.6384,0.88615,1.2058,2.049,1.936,1.0525,0.94578,1.815,2.1408,1.3412,0.81059,1.4883,2.1958,1.6861,0.84145,1.1465,2.0787,2.0031,1.0397,0.87512,1.8098,2.2105,1.3641
};

int indexSim = 0;
int isFirst = 1;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_LTDC_Init(void);
static void MX_DMA2D_Init(void);
static void MX_SPI5_Init(void);
static void MX_I2C3_Init(void);
static void MX_FMC_Init(void);
static void MX_ADC2_Init(void);
static void MX_ADC3_Init(void);
static void MX_DAC_Init(void);
static void MX_UART5_Init(void);
/* USER CODE BEGIN PFP */
void DisplayChannel(void);
void Display1(void);
void Display2(void);
void Display3(void);
void Display4(void);
void Display1_Filt();
void Display2_Filt();
void Display3_Filt();
void Display4_Filt();

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tochar(uint8_t str(), int num)
{
	int i, rem, len=0,n;
	n = num;
	while(n!=0)
	{
		len++;
		n /= 10;
		}
	for (i=0;i<len;i++)
	{
	rem = num % 10;
	num = num/10;
	str(len - (i+1)- rem +'0');
	}
	str[len] = '\0';
	str[len+1] = '\n';
	str[len+2] = '\r';
	}
uint8_t data[10] = "None";

void simulateModulatedWave()
{

	if (isFirst == 1) {
		for (; indexSim < FFT_SIZE*10.5; ++indexSim)
			InputADC[indexSim] = pow(2,12)*sineWave[indexSim]/3.3;
		  sum = 0;
		isFirst = 0;
	} else {
		if (indexSim >= MODULATED_SIZE)
			indexSim = 0;
		for (int i = 1; i < FFT_SIZE*10.5; ++i)
			InputADC[i-1] = InputADC[i];
		InputADC[FFT_SIZE-1] = pow(2,12)*sineWave[indexSim]/3.3;
		indexSim++;
	}
//	for(i = 0; i < FFT_SIZE; i++)
//	    to[i] = Input[i];
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_LTDC_Init();
  MX_DMA2D_Init();
  MX_SPI5_Init();
  MX_I2C3_Init();
  MX_FMC_Init();
  MX_ADC2_Init();
  MX_ADC3_Init();
  MX_DAC_Init();
  MX_UART5_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);

  channelCounter = 0;

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
  BSP_TS_ITConfig();

  arm_rfft_fast_instance_f32 RealFFT;

  Test = 0;
  Tcount = 0;
  lcdClearCounter = 0;
  lcdPlotCounter = 0;
  lcdAlreadyCleared = FALSE;
  LCD_DisplayState = DISPLAY_STATE_IN_FREQUENCY;
  FREQ_DisplayState = FREQ_NORMAL;
  DisplayV = 1;

//  HAL_ADC_Start(&hadc3);
//  HAL_ADC_Start(&hadc2);
//  HAL_ADCEx_MultiModeStart_DMA(&hadc1, INADC, (int) 10.5*FFT_SIZE);
//
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
  /* USER CODE END 2 */
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	simulateModulatedWave();
	simualteInput();

    if (DisplayV == 6) {
     Display1_Filt();
    } else if (DisplayV == 7) {
     Display2_Filt();
    } else if (DisplayV == 8) {
     Display3_Filt();
    } else if (DisplayV == 9) {
     Display4_Filt();
    } else {
      arm_rfft_fast_init_f32(&RealFFT, FFT_SIZE);
      arm_rfft_fast_f32(&RealFFT, IN, OUT, 0);
      Output[1] = 0;
      arm_cmplx_mag_f32(OUT, MAG, FFT_SIZE);
    }

    if (DisplayV == 1) {
      Display1();
    } else if (DisplayV == 2) {
      Display2();
    } else if (DisplayV == 3) {
      Display3();
    } else if (DisplayV == 4) {
      Display4();
    }


  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 360;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_3;
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}

/**
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}

/**
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{

  /* USER CODE BEGIN DMA2D_Init 0 */

  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
  hdma2d.Init.Mode = DMA2D_M2M;
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0;
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}

/**
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}

/**
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 9;
  hltdc.Init.VerticalSync = 1;
  hltdc.Init.AccumulatedHBP = 29;
  hltdc.Init.AccumulatedVBP = 3;
  hltdc.Init.AccumulatedActiveW = 269;
  hltdc.Init.AccumulatedActiveH = 323;
  hltdc.Init.TotalWidth = 279;
  hltdc.Init.TotalHeigh = 327;
  hltdc.Init.Backcolor.Blue = 0;
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 0;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 0;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg.Alpha = 0;
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
  pLayerCfg.FBStartAdress = 0;
  pLayerCfg.ImageWidth = 0;
  pLayerCfg.ImageHeight = 0;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
  {
    Error_Handler();
  }
  pLayerCfg1.WindowX0 = 0;
  pLayerCfg1.WindowX1 = 0;
  pLayerCfg1.WindowY0 = 0;
  pLayerCfg1.WindowY1 = 0;
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg1.Alpha = 0;
  pLayerCfg1.Alpha0 = 0;
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
  pLayerCfg1.FBStartAdress = 0;
  pLayerCfg1.ImageWidth = 0;
  pLayerCfg1.ImageHeight = 0;
  pLayerCfg1.Backcolor.Blue = 0;
  pLayerCfg1.Backcolor.Green = 0;
  pLayerCfg1.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}

/**
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
  hspi5.Init.Mode = SPI_MODE_MASTER;
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_SOFT;
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 9600;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /* USER CODE BEGIN FMC_Init 1 */

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 7;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
  {
    Error_Handler( );
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|OTG_FS_PSO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

}

/* USER CODE BEGIN 4 */

/*** Unfiltered First Quarter  ***/
void Display1(void)
{

  for (i = 0; i < FFT_SIZE/8; i++){
     Magnitude[i] = 20*log(Magnitude[i])/1.15;
   }

  if (!lcdAlreadyCleared || lcdClearCounter > 50) {
    lcdClearCounter = 0;
    lcdAlreadyCleared = TRUE;
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
    BSP_LCD_Clear(LCD_COLOR_BLACK);
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
    BSP_LCD_SetFont(&Font8);
    BSP_LCD_DrawHLine(LCD_PADDING, 24, 190);
    BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
    BSP_LCD_DisplayStringAt(220, 10, (uint8_t*) "9", LEFT_MODE);
    BSP_LCD_DisplayStringAt(205, 10, (uint8_t*) "0", LEFT_MODE);
    BSP_LCD_DisplayStringAt(107, 10, (uint8_t*) "-54", LEFT_MODE);
    BSP_LCD_DisplayStringAt(17, 14, (uint8_t*) "0", LEFT_MODE);
    BSP_LCD_DisplayStringAt(10, 22, (uint8_t*) "0", LEFT_MODE);
    if (FREQ_DisplayState == FREQ_NORMAL) {
      BSP_LCD_DisplayStringAt(9, 65, (uint8_t*) ".1", LEFT_MODE);
      BSP_LCD_DisplayStringAt(9, 110, (uint8_t*) ".2", LEFT_MODE);
      BSP_LCD_DisplayStringAt(9, 158, (uint8_t*) ".3", LEFT_MODE);
      BSP_LCD_DisplayStringAt(9, 206, (uint8_t*) ".4", LEFT_MODE);
      BSP_LCD_DisplayStringAt(9, 255, (uint8_t*) ".5", LEFT_MODE);
    }
    for (i = 0; i < 7; ++i) {
      BSP_LCD_DrawHLine(17 , 41 + 48 * i, 3);
    }
    for (i = 1; i < 15; ++i) {
      BSP_LCD_DrawVLine(10 + 15 * i, 22, 3);
    }
    BSP_LCD_DrawHLine(LCD_PADDING, 24, 200);
    BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
    BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "1: Magnitude(dB)", CENTER_MODE);
    char *yAxisLabel = "Frequency (MHz)";
    for (i = 0; i < strlen(yAxisLabel); ++i) {
      BSP_LCD_DisplayChar(2, 100 + i * 8 , yAxisLabel[i]);
    }
    char buf[50];
    sprintf(buf, "Unfiltered");
    BSP_LCD_SetFont(&Font12);
    BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
    BSP_LCD_DisplayStringAt(0, 310, (uint8_t*) buf, RIGHT_MODE);
    BSP_LCD_SetFont(&Font8);
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
  }
  ++lcdClearCounter;

  if (lcdPlotCounter > 5){                                //Plot FFT result on Axis
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
    BSP_LCD_FillRect(21, 25, 200, 256);
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
    if (FREQ_DisplayState == FREQ_NORMAL)
    {
      for (i = 0; i < FFT_SIZE/8 ; ++i) {
        BSP_LCD_FillRect(21, 26 + (i), Magnitude[i] > 200 ? 200 :Magnitude[i] , 1);
      }
    }
    lcdPlotCounter = 0;
  }
  lcdPlotCounter++;
}

/*** Unfiltered Second Quarter  ***/
void Display2(void)
{
  for (i = FFT_SIZE/8; i< 2*FFT_SIZE/8; i++){
     Magnitude[i] = 20*log(Magnitude[i])/1.15;
   }

	if (!lcdAlreadyCleared || lcdClearCounter > 50) {

	    lcdClearCounter = 0;
	    lcdAlreadyCleared = TRUE;
	    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
	    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
	    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
	    BSP_LCD_Clear(LCD_COLOR_BLACK);
	    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
	    BSP_LCD_SetFont(&Font8);
	    BSP_LCD_DrawHLine(LCD_PADDING, 24, 190);
	    BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
	    BSP_LCD_DisplayStringAt(220, 10, (uint8_t*) "9", LEFT_MODE);
	    BSP_LCD_DisplayStringAt(205, 10, (uint8_t*) "0", LEFT_MODE);
	    BSP_LCD_DisplayStringAt(107, 10, (uint8_t*) "-54", LEFT_MODE);
	    BSP_LCD_DisplayStringAt(17, 14, (uint8_t*) "0", LEFT_MODE);
	    if (FREQ_DisplayState == FREQ_NORMAL) {
	      BSP_LCD_DisplayStringAt(9, 39, (uint8_t*) ".6", LEFT_MODE);
	      BSP_LCD_DisplayStringAt(9, 84, (uint8_t*) ".7", LEFT_MODE);
	      BSP_LCD_DisplayStringAt(9, 130, (uint8_t*) ".8", LEFT_MODE);
	      BSP_LCD_DisplayStringAt(9, 176, (uint8_t*) ".9", LEFT_MODE);
	      BSP_LCD_DisplayStringAt(11, 222, (uint8_t*) "1", LEFT_MODE);
	      BSP_LCD_DisplayStringAt(6, 264, (uint8_t*) "1.1", LEFT_MODE);
	    }
	    for (i = 1; i < 6; ++i) {
	      BSP_LCD_DrawHLine(17 , 17 + 46 * i, 3);
	    }
	    for (i = 1; i < 15; ++i) {
	      BSP_LCD_DrawVLine(10 + 15 * i, 22, 3);
	    }
	    BSP_LCD_DrawHLine(LCD_PADDING, 24, 200);
	    BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
	    BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "2: Magnitude(dB)", CENTER_MODE);
	    char *yAxisLabel = "Frequency (MHz)";
	    for (i = 0; i < strlen(yAxisLabel); ++i) {
	      BSP_LCD_DisplayChar(2, 100 + i * 8 , yAxisLabel[i]);
	    }
	    char buf[50];
      sprintf(buf, "Unfiltered");
      BSP_LCD_SetFont(&Font12);
      BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
      BSP_LCD_DisplayStringAt(0, 310, (uint8_t*) buf, RIGHT_MODE);
      BSP_LCD_SetFont(&Font8);
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
	  }
	  ++lcdClearCounter;

	  if (lcdPlotCounter > 5) {
	    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	    BSP_LCD_FillRect(21, 25, 200, 256);
	    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
	    if (FREQ_DisplayState == FREQ_NORMAL)
	    {
	    	for (i = FFT_SIZE/8; i < 2*FFT_SIZE/8 ; ++i) {
	        BSP_LCD_FillRect(21, 26 + (i-FFT_SIZE/8), Magnitude[i] > 200 ? 200 :Magnitude[i], 1);
	      }
	    }
	    lcdPlotCounter = 0;
	  }
	  lcdPlotCounter++;
}

/*** Unfiltered Third Quarter  ***/
void Display3(void)
{


  for (i = 2*FFT_SIZE/8; i< 3*FFT_SIZE/8; i++){
     Magnitude[i] = 20*log(Magnitude[i])/1.15;
   }

	if (!lcdAlreadyCleared || lcdClearCounter > 50) {

	    lcdClearCounter = 0;
	    lcdAlreadyCleared = TRUE;
	    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
	    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
	    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
	    BSP_LCD_Clear(LCD_COLOR_BLACK);
	    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
	    BSP_LCD_SetFont(&Font8);
	    BSP_LCD_DrawHLine(LCD_PADDING, 24, 190);
	    BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
	    BSP_LCD_DisplayStringAt(220, 10, (uint8_t*) "9", LEFT_MODE);
	       BSP_LCD_DisplayStringAt(205, 10, (uint8_t*) "0", LEFT_MODE);
	       BSP_LCD_DisplayStringAt(107, 10, (uint8_t*) "-54", LEFT_MODE);
	       BSP_LCD_DisplayStringAt(17, 14, (uint8_t*) "0", LEFT_MODE);
	       if (FREQ_DisplayState == FREQ_NORMAL) {
	         BSP_LCD_DisplayStringAt(6, 55, (uint8_t*) "1.2", LEFT_MODE);
	         BSP_LCD_DisplayStringAt(6, 102, (uint8_t*) "1.3", LEFT_MODE);
	         BSP_LCD_DisplayStringAt(6, 150, (uint8_t*) "1.4", LEFT_MODE);
	         BSP_LCD_DisplayStringAt(6, 195, (uint8_t*) "1.5", LEFT_MODE);
	         BSP_LCD_DisplayStringAt(6, 243, (uint8_t*) "1.6", LEFT_MODE);
	       }
	       for (i = 0; i < 6; ++i) {
	         BSP_LCD_DrawHLine(17 , 33 + 47 * i, 3);
	       }
	       for (i = 1; i < 15; ++i) {
	         BSP_LCD_DrawVLine(10 + 15 * i, 22, 3);
	       }
	       BSP_LCD_DrawHLine(LCD_PADDING, 24, 200);
	       BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
	       BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "3: Magnitude(dB)", CENTER_MODE);
	       char *yAxisLabel = "Frequency (MHz)";
	       for (i = 0; i < strlen(yAxisLabel); ++i) {
	         BSP_LCD_DisplayChar(2, 100 + i * 8 , yAxisLabel[i]);
	       }
	       char buf[50];
         sprintf(buf, "Unfiltered");
         BSP_LCD_SetFont(&Font12);
         BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
         BSP_LCD_DisplayStringAt(0, 310, (uint8_t*) buf, RIGHT_MODE);
         BSP_LCD_SetFont(&Font8);
         BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
	  }
	  ++lcdClearCounter;

	  if (lcdPlotCounter > 5){
	    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	    BSP_LCD_FillRect(21, 25, 200, 256);
	    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
	    if (FREQ_DisplayState == FREQ_NORMAL)
	    {
	      for (i = 2*FFT_SIZE/8; i < 3*FFT_SIZE/8 ; ++i) {
	        BSP_LCD_FillRect(21, 26 + (i-2*FFT_SIZE/8),  Magnitude[i] > 200 ? 200 :Magnitude[i], 1);
	      }
	    }
	    lcdPlotCounter = 0;
	  }
	  lcdPlotCounter++;
}

/*** Unfiltered Last Quarter  ***/
void Display4(void)
{
  for (i = 3*FFT_SIZE/8; i< 4*FFT_SIZE/8; i++){
     Magnitude[i] = 20*log(Magnitude[i])/1.15;
   }

	if (!lcdAlreadyCleared || lcdClearCounter > 50) {

	    lcdClearCounter = 0;
	    lcdAlreadyCleared = TRUE;
	    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
	    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
	    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
	    BSP_LCD_Clear(LCD_COLOR_BLACK);
	    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
	    BSP_LCD_SetFont(&Font8);
	    BSP_LCD_DrawHLine(LCD_PADDING, 24, 190);
	    BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
	    BSP_LCD_DisplayStringAt(220, 10, (uint8_t*) "9", LEFT_MODE);
      BSP_LCD_DisplayStringAt(205, 10, (uint8_t*) "0", LEFT_MODE);
      BSP_LCD_DisplayStringAt(107, 10, (uint8_t*) "-54", LEFT_MODE);
      BSP_LCD_DisplayStringAt(17, 14, (uint8_t*) "0", LEFT_MODE);
      if (FREQ_DisplayState == FREQ_NORMAL) {
        BSP_LCD_DisplayStringAt(6, 30, (uint8_t*) "1.7", LEFT_MODE);
        BSP_LCD_DisplayStringAt(6, 74, (uint8_t*) "1.8", LEFT_MODE);
        BSP_LCD_DisplayStringAt(6, 121, (uint8_t*) "1.9", LEFT_MODE);
        BSP_LCD_DisplayStringAt(11, 168, (uint8_t*) "2", LEFT_MODE);
        BSP_LCD_DisplayStringAt(6, 214, (uint8_t*) "2.1", LEFT_MODE);
        BSP_LCD_DisplayStringAt(6, 259, (uint8_t*) "2.2", LEFT_MODE);
      }
      for (i = 1; i < 7; ++i) {
        BSP_LCD_DrawHLine(17 , 7 + 46 * i, 3);
      }
      for (i = 1; i < 15; ++i) {
        BSP_LCD_DrawVLine(10 + 15 * i, 22, 3);
      }
      BSP_LCD_DrawHLine(LCD_PADDING, 24, 200);
      BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
      BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "4: Magnitude(dB)", CENTER_MODE);
      char *yAxisLabel = "Frequency (MHz)";
      for (i = 0; i < strlen(yAxisLabel); ++i) {
        BSP_LCD_DisplayChar(2, 100 + i * 8 , yAxisLabel[i]);
      }
      char buf[50];
      sprintf(buf, "Unfiltered");
      BSP_LCD_SetFont(&Font12);
      BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
      BSP_LCD_DisplayStringAt(0, 310, (uint8_t*) buf, RIGHT_MODE);
      BSP_LCD_SetFont(&Font8);
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
	  }
	  ++lcdClearCounter;

	  if (lcdPlotCounter > 5) {                                //Plot FFT result on Axis
	    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	    BSP_LCD_FillRect(21, 25, 200, 256);
	    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
	    if (FREQ_DisplayState == FREQ_NORMAL) {
	      for (i = 3*FFT_SIZE/8; i < 4*FFT_SIZE/8 ; ++i) {
	        BSP_LCD_FillRect(21, 26 + (i-3*FFT_SIZE/8),  Magnitude[i] > 200 ? 200 :Magnitude[i], 1);
	      }
	    }
	    lcdPlotCounter = 0;
	  }
	  lcdPlotCounter++;
}

/*** Filtered First Quarter  ***/
void Display1_Filt(void)
{

  //IIR BPF
  arm_biquad_cascade_df2T_instance_f32 IIR;
  arm_biquad_cascade_df2T_init_f32(&IIR, Stages, Coefficients[channelCounter], StateV);
  arm_biquad_cascade_df2T_f32(&IIR, IN, FiltOut, FFT_SIZE);


  //SQAURE
  for (i = 0; i < FFT_SIZE; i++)
  {
    if (FilterOutput[i] < 0.0)
    {
      toDAC[i] = FilterOutput[i]*-1.0;
    }
    else
    {
      toDAC[i] = FilterOutput[i];
    }
  }


  //Envelope Detection and send Envelope Detection output to DAC
  Message[0] = Message[FFT_SIZE-1];
  for (i = 1; i < FFT_SIZE-1; i++)
  {
    if ((toDAC[i] >= toDAC[i-1]) & (toDAC[i] >= toDAC[i+1]))
    {
      Message[i] = (uint8_t)(2*toDAC[i]);
      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, (uint8_t)Message[i]);
      tochar(data, (uint8_t)Message[i]);
      HAL_UART_Transmit(&huart5, data, 10, 100);
    }
  }


  //FFT For Response Plotting
  arm_rfft_fast_instance_f32 FFT;
  arm_rfft_fast_init_f32(&FFT, FFT_SIZE);
  arm_rfft_fast_f32(&FFT, FiltOut, FiltPlot, 0);
  arm_cmplx_mag_f32(FiltPlot, FiltMag, FFT_SIZE);
  //arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);



  for (i = 0; i < FFT_SIZE/8; i++){
     FilterMagnitude[i] = 20*log(FilterMagnitude[i])/1.15;
    }

  if (!lcdAlreadyCleared || lcdClearCounter > 50) {
      lcdClearCounter = 0;
      lcdAlreadyCleared = TRUE;
      BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
      BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
      BSP_LCD_Clear(LCD_COLOR_BLACK);
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
      BSP_LCD_SetFont(&Font8);
      BSP_LCD_DrawHLine(LCD_PADDING, 24, 190);
      BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
      BSP_LCD_DisplayStringAt(220, 10, (uint8_t*) "9", LEFT_MODE);
      BSP_LCD_DisplayStringAt(205, 10, (uint8_t*) "0", LEFT_MODE);
      BSP_LCD_DisplayStringAt(107, 10, (uint8_t*) "-54", LEFT_MODE);
      BSP_LCD_DisplayStringAt(17, 14, (uint8_t*) "0", LEFT_MODE);
      BSP_LCD_DisplayStringAt(10, 22, (uint8_t*) "0", LEFT_MODE);
      //BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"1", LEFT_MODE);
      if (FREQ_DisplayState == FREQ_NORMAL) {
        BSP_LCD_DisplayStringAt(9, 65, (uint8_t*) ".1", LEFT_MODE);
        BSP_LCD_DisplayStringAt(9, 110, (uint8_t*) ".2", LEFT_MODE);
        BSP_LCD_DisplayStringAt(9, 158, (uint8_t*) ".3", LEFT_MODE);
        BSP_LCD_DisplayStringAt(9, 206, (uint8_t*) ".4", LEFT_MODE);
        BSP_LCD_DisplayStringAt(9, 255, (uint8_t*) ".5", LEFT_MODE);
      }
      for (i = 0; i < 7; ++i) {
        BSP_LCD_DrawHLine(17 , 41 + 48 * i, 3);
      }
      for (i = 1; i < 15; ++i) {
        BSP_LCD_DrawVLine(10 + 15 * i, 22, 3);
      }
      BSP_LCD_DrawHLine(LCD_PADDING, 24, 200);
      BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
      BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "1: Magnitude(dB)", CENTER_MODE);
      char buf[50];
      sprintf(buf, "Channel: %d", channelCounter);
      BSP_LCD_SetFont(&Font12);
      BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
      BSP_LCD_DisplayStringAt(0, 310, (uint8_t*) buf, RIGHT_MODE);
      BSP_LCD_SetFont(&Font8);
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
      char *yAxisLabel = "Frequency (MHz)";
      for (i = 0; i < strlen(yAxisLabel); ++i) {
        BSP_LCD_DisplayChar(2, 100 + i * 8 , yAxisLabel[i]);
      }
    }
    ++lcdClearCounter;

    if (lcdPlotCounter > 5){                                //Plot FFT result on Axis
      BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
      BSP_LCD_FillRect(21, 25, 200, 256);
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
      if (FREQ_DisplayState == FREQ_NORMAL)
      {
        for (i = 0; i < FFT_SIZE/8 ; ++i) {
          BSP_LCD_FillRect(21, 26 + (i), FilterMagnitude[i]/190, 1);
        }
      }
      lcdPlotCounter = 0;
    }
    lcdPlotCounter++;

}

/*** Filtered Second Quarter  ***/
void Display2_Filt(void)
{

  //IIR BPF
  arm_biquad_cascade_df2T_instance_f32 IIR;
  arm_biquad_cascade_df2T_init_f32(&IIR, Stages, Coefficients[channelCounter], StateV);
  arm_biquad_cascade_df2T_f32(&IIR, IN, FiltOut, FFT_SIZE);


  //SQAURE
  for (i = 0; i < FFT_SIZE; i++)
  {
    if (FilterOutput[i] < 0.0)
    {
      toDAC[i] = FilterOutput[i]*-1.0;
    }
    else
    {
      toDAC[i] = FilterOutput[i];
    }
  }


  //Envelope Detection and send Envelope Detection output to DAC
  Message[0] = Message[FFT_SIZE-1];
  for (i = 1; i < FFT_SIZE-1; i++)
  {
    if ((toDAC[i] >= toDAC[i-1]) & (toDAC[i] >= toDAC[i+1]))
    {
      Message[i] = (uint8_t)(2*toDAC[i]);
      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, (uint8_t)Message[i]);
    }
  }


  //FFT For Response Plotting
  arm_rfft_fast_instance_f32 FFT;
  arm_rfft_fast_init_f32(&FFT, FFT_SIZE);
  arm_rfft_fast_f32(&FFT, FiltOut, FiltPlot, 0);
  arm_cmplx_mag_f32(FiltPlot, FiltMag, FFT_SIZE);



  for (i = 0; i < FFT_SIZE/8; i++){
     FilterMagnitude[i] = 20*log(FilterMagnitude[i])/1.15;
    }

  if (!lcdAlreadyCleared || lcdClearCounter > 50) {

        lcdClearCounter = 0;
        lcdAlreadyCleared = TRUE;
        BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
        BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
        BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
        BSP_LCD_Clear(LCD_COLOR_BLACK);
        BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
        BSP_LCD_SetFont(&Font8);
        BSP_LCD_DrawHLine(LCD_PADDING, 24, 190);
        BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
        BSP_LCD_DisplayStringAt(220, 10, (uint8_t*) "9", LEFT_MODE);
        BSP_LCD_DisplayStringAt(205, 10, (uint8_t*) "0", LEFT_MODE);
        BSP_LCD_DisplayStringAt(107, 10, (uint8_t*) "-54", LEFT_MODE);
        BSP_LCD_DisplayStringAt(17, 14, (uint8_t*) "0", LEFT_MODE);
        //BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"2", LEFT_MODE);
        if (FREQ_DisplayState == FREQ_NORMAL) {
          BSP_LCD_DisplayStringAt(9, 39, (uint8_t*) ".6", LEFT_MODE);
          BSP_LCD_DisplayStringAt(9, 84, (uint8_t*) ".7", LEFT_MODE);
          BSP_LCD_DisplayStringAt(9, 130, (uint8_t*) ".8", LEFT_MODE);
          BSP_LCD_DisplayStringAt(9, 176, (uint8_t*) ".9", LEFT_MODE);
          BSP_LCD_DisplayStringAt(11, 222, (uint8_t*) "1", LEFT_MODE);
          BSP_LCD_DisplayStringAt(6, 264, (uint8_t*) "1.1", LEFT_MODE);
        }
        for (i = 1; i < 6; ++i) {
          BSP_LCD_DrawHLine(17 , 17 + 46 * i, 3);
        }
        for (i = 1; i < 15; ++i) {
          BSP_LCD_DrawVLine(10 + 15 * i, 22, 3);
        }
        BSP_LCD_DrawHLine(LCD_PADDING, 24, 200);
        BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
        BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "2: Magnitude(dB)", CENTER_MODE);
        char buf[50];
        sprintf(buf, "Channel: %d", channelCounter);
        BSP_LCD_SetFont(&Font12);
        BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
        BSP_LCD_DisplayStringAt(0, 310, (uint8_t*) buf, RIGHT_MODE);
        BSP_LCD_SetFont(&Font8);
        BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
        char *yAxisLabel = "Frequency (MHz)";
        for (i = 0; i < strlen(yAxisLabel); ++i) {
          BSP_LCD_DisplayChar(2, 100 + i * 8 , yAxisLabel[i]);
        }
      }
      ++lcdClearCounter;

      if (lcdPlotCounter > 5) {
        BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
        BSP_LCD_FillRect(21, 25, 200, 256);
        BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
        if (FREQ_DisplayState == FREQ_NORMAL) {
          for (i = FFT_SIZE/8; i < 2*FFT_SIZE/8 ; ++i) {
            BSP_LCD_FillRect(21, 26 + (i-FFT_SIZE/8), FilterMagnitude[i]/190, 1);
          }
        }
        lcdPlotCounter = 0;
      }
      lcdPlotCounter++;

}

/*** Filtered Third Quarter  ***/
void Display3_Filt(void)
{

  //IIR BPF
  arm_biquad_cascade_df2T_instance_f32 IIR;
  arm_biquad_cascade_df2T_init_f32(&IIR, Stages, Coefficients[channelCounter], StateV);
  arm_biquad_cascade_df2T_f32(&IIR, IN, FiltOut, FFT_SIZE);


  //ABS
  for (i = 0; i < FFT_SIZE; i++) {
    if (FilterOutput[i] < 0.0) {
      toDAC[i] = FilterOutput[i]*-1.0;
    } else {
      toDAC[i] = FilterOutput[i];
    }
  }


  //Envelope Detection and send Envelope Detection output to DAC
  Message[0] = Message[FFT_SIZE-1];
  for (i = 1; i < FFT_SIZE-1; i++)
  {
    if ((toDAC[i] >= toDAC[i-1]) & (toDAC[i] >= toDAC[i+1]))
    {
      Message[i] = (uint8_t)(2*toDAC[i]);
      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, (uint8_t)Message[i]);
    }
  }


  //FFT For Response Plotting
  arm_rfft_fast_instance_f32 FFT;
  arm_rfft_fast_init_f32(&FFT, FFT_SIZE);
  arm_rfft_fast_f32(&FFT, FiltOut, FiltPlot, 0);
  arm_cmplx_mag_f32(FiltPlot, FiltMag, FFT_SIZE);

  for (i = 0; i < FFT_SIZE/8; i++) {
     FilterMagnitude[i] = 20*log(FilterMagnitude[i])/1.15;
    }

  if (!lcdAlreadyCleared || lcdClearCounter > 50) {

        lcdClearCounter = 0;
        lcdAlreadyCleared = TRUE;
        BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
        BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
        BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
        BSP_LCD_Clear(LCD_COLOR_BLACK);
        BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
        BSP_LCD_SetFont(&Font8);
        BSP_LCD_DrawHLine(LCD_PADDING, 24, 190);
        BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
        BSP_LCD_DisplayStringAt(220, 10, (uint8_t*) "9", LEFT_MODE);
        BSP_LCD_DisplayStringAt(205, 10, (uint8_t*) "0", LEFT_MODE);
        BSP_LCD_DisplayStringAt(107, 10, (uint8_t*) "-54", LEFT_MODE);
        BSP_LCD_DisplayStringAt(17, 14, (uint8_t*) "0", LEFT_MODE);
        //BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"3", LEFT_MODE);
        if (FREQ_DisplayState == FREQ_NORMAL) {
         BSP_LCD_DisplayStringAt(6, 55, (uint8_t*) "1.2", LEFT_MODE);
         BSP_LCD_DisplayStringAt(6, 102, (uint8_t*) "1.3", LEFT_MODE);
         BSP_LCD_DisplayStringAt(6, 150, (uint8_t*) "1.4", LEFT_MODE);
         BSP_LCD_DisplayStringAt(6, 195, (uint8_t*) "1.5", LEFT_MODE);
         BSP_LCD_DisplayStringAt(6, 243, (uint8_t*) "1.6", LEFT_MODE);
        }
        for (i = 0; i < 6; ++i) {
          BSP_LCD_DrawHLine(17 , 33 + 47 * i, 3);
        }
        for (i = 1; i < 15; ++i) {
          BSP_LCD_DrawVLine(10 + 15 * i, 22, 3);
        }
        BSP_LCD_DrawHLine(LCD_PADDING, 24, 200);
        BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
        BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "3: Magnitude(dB)", CENTER_MODE);
        char buf[50];
        sprintf(buf, "Channel: %d", channelCounter);
        BSP_LCD_SetFont(&Font12);
        BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
        BSP_LCD_DisplayStringAt(0, 310, (uint8_t*) buf, RIGHT_MODE);
        BSP_LCD_SetFont(&Font8);
        BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
        char *yAxisLabel = "Frequency (MHz)";
        for (i = 0; i < strlen(yAxisLabel); ++i) {
         BSP_LCD_DisplayChar(2, 100 + i * 8 , yAxisLabel[i]);
        }
      }
      ++lcdClearCounter;

      if (lcdPlotCounter > 5) {
        BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
        BSP_LCD_FillRect(21, 25, 200, 256);
        BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
        if (FREQ_DisplayState == FREQ_NORMAL)
        {
          for (i = 2*FFT_SIZE/8; i < 3*FFT_SIZE/8 ; ++i) {
            BSP_LCD_FillRect(21, 26 + (i-2*FFT_SIZE/8), FilterMagnitude[i]/190, 1);
          }
        }
        lcdPlotCounter = 0;
      }
      lcdPlotCounter++;
}

/*** Filtered Fourth Quarter  ***/
void Display4_Filt(void)
{
  /**** Start BANDPASS AND DEMODULATION **/
  arm_biquad_cascade_df2T_instance_f32 IIR;
  arm_biquad_cascade_df2T_init_f32(&IIR, Stages, Coefficients[channelCounter], StateV);
  arm_biquad_cascade_df2T_f32(&IIR, IN, FiltOut, FFT_SIZE);

  for (i = 0; i < FFT_SIZE; i++) {
    if (FilterOutput[i] < 0.0) {
      toDAC[i] = FilterOutput[i]*-1.0;
    }
    else {
      toDAC[i] = FilterOutput[i];
    }
  }

  //Envelope Detection and DAC output
  // Look for max between adjacent 3 samples, output that max to the DAC
  Message[0] = Message[FFT_SIZE-1];
  for (i = 1; i < FFT_SIZE-1; i++)
  {
    if ((toDAC[i] >= toDAC[i-1]) & (toDAC[i] >= toDAC[i+1]))
    {
      Message[i] = (uint8_t)(2*toDAC[i]);
      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, (uint8_t)Message[i]);
    }
  }

  /**** End BANDPASS AND DEMODULATION **/

  // FFT
  arm_rfft_fast_instance_f32 FFT;
  arm_rfft_fast_init_f32(&FFT, FFT_SIZE);
  arm_rfft_fast_f32(&FFT, FiltOut, FiltPlot, 0);
  arm_cmplx_mag_f32(FiltPlot, FiltMag, FFT_SIZE);

  for (i = 0; i < FFT_SIZE/8; i++) {
     FilterMagnitude[i] = 20*log(FilterMagnitude[i])/1.15;
    }

  if (!lcdAlreadyCleared || lcdClearCounter > 50) {
        lcdClearCounter = 0;
        lcdAlreadyCleared = TRUE;
        BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
        BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
        BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
        BSP_LCD_Clear(LCD_COLOR_BLACK);
        BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
        BSP_LCD_SetFont(&Font8);
        BSP_LCD_DrawHLine(LCD_PADDING, 24, 190);
        BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
        BSP_LCD_DisplayStringAt(220, 10, (uint8_t*) "9", LEFT_MODE);
        BSP_LCD_DisplayStringAt(205, 10, (uint8_t*) "0", LEFT_MODE);
        BSP_LCD_DisplayStringAt(107, 10, (uint8_t*) "-54", LEFT_MODE);
        BSP_LCD_DisplayStringAt(17, 14, (uint8_t*) "0", LEFT_MODE);

        if (FREQ_DisplayState == FREQ_NORMAL) {
          BSP_LCD_DisplayStringAt(6, 30, (uint8_t*) "1.7", LEFT_MODE);
          BSP_LCD_DisplayStringAt(6, 74, (uint8_t*) "1.8", LEFT_MODE);
          BSP_LCD_DisplayStringAt(6, 121, (uint8_t*) "1.9", LEFT_MODE);
          BSP_LCD_DisplayStringAt(11, 168, (uint8_t*) "2", LEFT_MODE);
          BSP_LCD_DisplayStringAt(6, 214, (uint8_t*) "2.1", LEFT_MODE);
          BSP_LCD_DisplayStringAt(6, 259, (uint8_t*) "2.2", LEFT_MODE);
        }
        for (i = 1; i < 7; ++i) {
          BSP_LCD_DrawHLine(17 , 7 + 46 * i, 3);
        }
        for (i = 1; i < 15; ++i) {
          BSP_LCD_DrawVLine(10 + 15 * i, 22, 3);
        }
        BSP_LCD_DrawHLine(LCD_PADDING, 24, 200);
        BSP_LCD_DrawVLine(LCD_PADDING, 25, 265);
        BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "4: Magnitude(dB)", CENTER_MODE);
        char buf[50];
        sprintf(buf, "Channel: %d", channelCounter);
        BSP_LCD_SetFont(&Font12);
        BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
        BSP_LCD_DisplayStringAt(0, 310, (uint8_t*) buf, RIGHT_MODE);
        BSP_LCD_SetFont(&Font8);
        BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
        char *yAxisLabel = "Frequency (MHz)";
        for (i = 0; i < strlen(yAxisLabel); ++i) {
          BSP_LCD_DisplayChar(2, 100 + i * 8 , yAxisLabel[i]);
        }
      }
      ++lcdClearCounter;
      // plot the FFT
      if (lcdPlotCounter > 5) {
        BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
        BSP_LCD_FillRect(21, 25, 200, 256);
        BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
        if (FREQ_DisplayState == FREQ_NORMAL)
        {
          for (i = 3*FFT_SIZE/8; i < 4*FFT_SIZE/8 ; ++i) {
            BSP_LCD_FillRect(21, 26 + (i-3*FFT_SIZE/8), FilterMagnitude[i]/190, 1);
          }
        }
        lcdPlotCounter = 0;
      }
      lcdPlotCounter++;
}
/*** ADC INTERRUPT ***/
// From example code
void simualteInput()
{
  int ADC_Count = 0;
  // two samples store per "sample" for triple interleaved, 8 bits and mask
  for (i = 0; i < FFT_SIZE/2; i++) {
    Input[ADC_Count] = (float32_t)(InputADC[i] & 0x000000FF);
    ADC_Count++;
    Input[ADC_Count] = (float32_t)((InputADC[i] >> 8) & 0x000000FF);
    ADC_Count++;
  }

  sum = 0;
  // average
  for (i = 0; i < FFT_SIZE; i++) {
      sum = sum + Input[i];
  }

  mean = sum/FFT_SIZE;
  // subtract the average from each sample to normalize
  for (i = 0; i < FFT_SIZE; i++) {
       Input[i] = Input[i] - mean;
  }

  for(i = 0; i < FFT_SIZE; i++) {
       to[i] = Input[i];
  }

}




/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
